<?xml version="1.0"?>
<!--
XPath `for' and `let' expressions:
  [7] ExprSingle  ::=  ForExpr | LetExpr

This software or document includes material copied from or derived 
from the XQueryX 3.0 W3C Recommendation of 08 April 2014
(https://www.w3.org/TR/2014/REC-xqueryx-30-20140408/).
Copyright © 2014 W3C® (MIT, ERCIM, Keio, Beihang).
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns="http://www.w3.org/2005/XQueryX"
            targetNamespace="http://www.w3.org/2005/XQueryX"
            elementFormDefault="qualified"
            attributeFormDefault="qualified">
  
  <!-- for typed variable bindings -->
  <xsd:include schemaLocation="misc/var.xsd"/>
  
  <!-- This is the XQueryX syntax for `for' and `let' expressions
       [8]  ForExpr  ::=  SimpleForClause "return" ExprSingle
       [11] LetExpr  ::=  SimpleLetClause "return" ExprSingle  -->
  <xsd:complexType name="flworExpr">
    <xsd:complexContent>
      <xsd:extension base="expr">
        <xsd:sequence>
          <xsd:choice>
            <xsd:sequence maxOccurs="unbounded">
              <xsd:element ref="forClause"/>
            </xsd:sequence>
            <xsd:sequence maxOccurs="unbounded">
              <xsd:element ref="letClause"/>
            </xsd:sequence>
          </xsd:choice>
          <xsd:element ref="returnClause"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="flworExpr" type="flworExpr" substitutionGroup="expr"/>
  <!-- return clause  -->
  <xsd:element name="returnClause" type="exprWrapper"/>
	
  <!-- [9] SimpleForClause  ::=  "for" SimpleForBinding ("," SimpleForBinding)* -->
  <xsd:complexType name="forClause">
    <xsd:sequence>
      <xsd:element ref="forClauseItem" minOccurs="1" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="forClause" type="forClause"/>
  
  <!-- [10] SimpleForBinding  ::=  "$" VarName "in" ExprSingle --> 
  <xsd:complexType name="forClauseItem">
    <xsd:sequence>
      <xsd:element ref="typedVariableBinding"/>  <!-- in misc/var.xsd -->
      <xsd:element name="forExpr" type="exprWrapper"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="forClauseItem" type="forClauseItem"/>

  <!-- [12] SimpleLetClause  ::=  "let" SimpleLetBinding ("," SimpleLetBinding)* -->
  <xsd:complexType name="letClause">
    <xsd:sequence>
      <xsd:element ref="letClauseItem" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="letClause" type="letClause"/>
  
  <!-- [13] SimpleLetBinding  ::=  "$" VarName ":=" ExprSingle let clause -->
  <xsd:complexType name="letClauseItem">
    <xsd:sequence>
      <xsd:element ref="typedVariableBinding"/>  <!-- in misc/var.xsd -->
      <xsd:element name="letExpr" type="exprWrapper"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="letClauseItem" type="letClauseItem"/>

</xsd:schema>
/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. build/xquery30/java/org.w3c.qxparser/xpath-grammar.jj */
/*
This software or document includes material copied from or derived 
from the XPath/XQuery Applets (https://www.w3.org/2013/01/qt-applets/).
Copyright © 2013 W3C® (MIT, ERCIM, Keio, Beihang).
*/
/*@egen*/options {
        
        
        STATIC = false;                                                                                                                                                    
        FORCE_LA_CHECK=true;                                                                 
    
        }

        
        PARSER_BEGIN(XParser)

        package org.w3c.qxparser;

import org.w3c.qxparser.Node;
import org.w3c.qxparser.SimpleNode;

        import java.util.Stack;

        public class XParser/*@bgen(jjtree)*/implements XParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTXParserState jjtree = new JJTXParserState();

/*@egen*/
            

            boolean isStep = false;

            Stack _elementStack = new Stack();

            Stack binaryTokenStack = new Stack();

            public Node createNode(int id) {
                return null;
            }


            void processToken(SimpleNode n, Token t)
            {
                
                
                    if(t.kind == XParserConstants.Slash && n.id != XParserTreeConstants.JJTSLASH)
                        return;
                
                    if(t.kind == XParserConstants.TagQName && n.id != XParserTreeConstants.JJTTAGQNAME)
                        return;
                    if(t.kind == XParserConstants.S && n.id != XParserTreeConstants.JJTS)
                        return;
                
                n.processToken(t);
            }

            
                void checkCharRef(String ref) throws ParseException
                {
                    String numeral = ref.substring(2, ref.length() - 1);
                    int val;
                    try {
                        if (numeral.charAt(0) == 'x') {
                            val = Integer.parseInt(numeral.substring(1), 16);
                        } else
                            val = Integer.parseInt(numeral);
                    } catch (NumberFormatException nfe) {
                        // "The string does not contain a parsable integer."
                        // Given the constraints imposed by the grammar/parser,
                        // I believe the only way this can happen is if the
                        // numeral is too long to fit in an 'int',
                        // which means that it's also too big to identify
                        // a valid character.
                        throw new ParseException(
                            "err:XQST0090: character reference does not identify a valid character: " + ref);
                    }

                    boolean isLegal = val == 0x9 || val == 0xA || val == 0xD
                        || (val >= 0x20 && val <= 0xD7FF)
                        || (val >= 0xE000 && val <= 0xFFFD)
                        || (val >= 0x10000 && val <= 0x10FFFF);
                    if (!isLegal)
                        throw new ParseException(
                            "err:XQST0090: character reference does not identify a valid character: " + ref);
                }
            


        }

        PARSER_END(XParser)

    

        TOKEN_MGR_DECLS : {
            public Stack stateStack = new Stack();

            
        void CommonTokenAction(Token t) {}
    

            /**
              * Push the current state onto the state stack.
              */
            private void pushState()
            {
                
                stateStack.addElement(new Integer(curLexState));
            }

            /**
              * Push the given state onto the state stack.
              * @param state Must be a valid state.
              */
            private void pushState(int state)
            {
                
                stateStack.push(new Integer(state));
            }

            /**
              * Pop the state on the state stack, and switch to that state.
              */
            private void popState()
            {
                if (stateStack.size() == 0)
                {
                    // E.g., a would-be query consisting of a single right curly brace.
                    throw new TokenMgrError(
                        "On line " + input_stream.getEndLine() + ","
                        + " the expression contains an 'ending' construct"
                        + " (e.g., a right-brace or end-tag)"
                        + " for which the corresponding 'starting' construct does not appear.",
                        TokenMgrError.LEXICAL_ERROR
                    );
                }

                int nextState = ((Integer) stateStack.pop()).intValue();
                
                SwitchTo(nextState);
            }

            /**
              * Print the current line position.
              */
            public void printLinePos()
            {
                System.err.println("Line: " + input_stream.getEndLine());
            }
        }

        
        SimpleNode START() :
        {/*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) START */
            try {
/*@egen*/
            QueryList()<EOF>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/
            { if(this.token_source.curLexState == XParserConstants.EXPR_COMMENT)
                throw new ParseException("Unterminated comment.");
            return jjtn000 ; }/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }
    void QueryList()  :
        {/*@bgen(jjtree) QueryList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQUERYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) QueryList */
            try {
/*@egen*/
            Module() ("%%%" [Module()])*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Module()  :
        {/*@bgen(jjtree) Module */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Module */
            try {
/*@egen*/
            [LOOKAHEAD(2) VersionDecl()] (LOOKAHEAD(2) LibraryModule()
                | MainModule())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void VersionDecl()  :
        {/*@bgen(jjtree) VersionDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVERSIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) VersionDecl */
            try {
/*@egen*/
            "xquery" ( (
    "encoding"{jjtn000.processValue("encoding");} <StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                                                                 {
                                                                   SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                                                   boolean jjtc001 = true;
                                                                   jjtree.openNodeScope(jjtn001);
                                                                 }
                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn001,  true);
                                                                   jjtc001 = false;
                                                                 }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                                                 } finally {
                                                                   if (jjtc001) {
                                                                     jjtree.closeNodeScope(jjtn001,  true);
                                                                   }
                                                                 }
/*@egen*/)
                |  (
    "version"{jjtn000.processValue("version");} <StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                                                               {
                                                                 SimpleNode jjtn002 = new SimpleNode(this, JJTSTRINGLITERAL);
                                                                 boolean jjtc002 = true;
                                                                 jjtree.openNodeScope(jjtn002);
                                                               }
                                                               try {
/*@egen*//*@bgen(jjtree)*/
                                                               {
                                                                 jjtree.closeNodeScope(jjtn002,  true);
                                                                 jjtc002 = false;
                                                               }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                               } finally {
                                                                 if (jjtc002) {
                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                 }
                                                               }
/*@egen*/ ["encoding" <StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                                                                                                                                               {
                                                                                                                                                 SimpleNode jjtn003 = new SimpleNode(this, JJTSTRINGLITERAL);
                                                                                                                                                 boolean jjtc003 = true;
                                                                                                                                                 jjtree.openNodeScope(jjtn003);
                                                                                                                                               }
                                                                                                                                               try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                               {
                                                                                                                                                 jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                 jjtc003 = false;
                                                                                                                                               }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                                                                                                               } finally {
                                                                                                                                                 if (jjtc003) {
                                                                                                                                                   jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                 }
                                                                                                                                               }
/*@egen*/])) Separator()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void MainModule()  :
        {/*@bgen(jjtree) MainModule */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMAINMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) MainModule */
            try {
/*@egen*/
            Prolog() QueryBody()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void LibraryModule()  :
        {/*@bgen(jjtree) LibraryModule */
  SimpleNode jjtn000 = new SimpleNode(this, JJTLIBRARYMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) LibraryModule */
            try {
/*@egen*/
            ModuleDecl() Prolog()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ModuleDecl()  :
        {/*@bgen(jjtree) ModuleDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMODULEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ModuleDecl */
            try {
/*@egen*/
            "module" "namespace" NCName() "=" URILiteral() Separator()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Prolog()  :
        {/*@bgen(jjtree) Prolog */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPROLOG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Prolog */
            try {
/*@egen*/
            (LOOKAHEAD(2) (LOOKAHEAD(3) DefaultNamespaceDecl()
                | LOOKAHEAD(3) Setter()
                | LOOKAHEAD(2) NamespaceDecl()
                | Import()) Separator())* (LOOKAHEAD(2) (LOOKAHEAD(2) ContextItemDecl()
                | LOOKAHEAD(2) AnnotatedDecl()
                | LOOKAHEAD(2) OptionDecl()) Separator())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Separator()  :
        {/*@bgen(jjtree) Separator */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSEPARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Separator */
            try {
/*@egen*/
            ";"/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Setter()  :
        {/*@bgen(jjtree) Setter */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSETTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Setter */
            try {
/*@egen*/
            (LOOKAHEAD(2) BoundarySpaceDecl()
                | LOOKAHEAD(3) DefaultCollationDecl()
                | LOOKAHEAD(2) BaseURIDecl()
                | LOOKAHEAD(2) ConstructionDecl()
                | LOOKAHEAD(2) OrderingModeDecl()
                | LOOKAHEAD(3) EmptyOrderDecl()
                | LOOKAHEAD(2) CopyNamespacesDecl()
                | LOOKAHEAD(2) DecimalFormatDecl())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void BoundarySpaceDecl()  :
        {/*@bgen(jjtree) BoundarySpaceDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTBOUNDARYSPACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) BoundarySpaceDecl */
            try {
/*@egen*/
            "declare" "boundary-space" ("preserve"/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/{jjtn000.processValue("preserve");}
                | "strip"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("strip");})/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DefaultCollationDecl()  :
        {/*@bgen(jjtree) DefaultCollationDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDEFAULTCOLLATIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DefaultCollationDecl */
            try {
/*@egen*/
            "declare" "default" "collation" URILiteral()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void BaseURIDecl()  :
        {/*@bgen(jjtree) BaseURIDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTBASEURIDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) BaseURIDecl */
            try {
/*@egen*/
            "declare" "base-uri" URILiteral()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ConstructionDecl()  :
        {/*@bgen(jjtree) ConstructionDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONSTRUCTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ConstructionDecl */
            try {
/*@egen*/
            "declare" "construction" ("strip"/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                             }
/*@egen*/{jjtn000.processValue("strip");}
                | "preserve"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("preserve");})/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void OrderingModeDecl()  :
        {/*@bgen(jjtree) OrderingModeDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDERINGMODEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) OrderingModeDecl */
            try {
/*@egen*/
            "declare" "ordering" ("ordered"/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/{jjtn000.processValue("ordered");}
                | "unordered"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("unordered");})/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void EmptyOrderDecl()  :
        {/*@bgen(jjtree) EmptyOrderDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEMPTYORDERDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) EmptyOrderDecl */
            try {
/*@egen*/
            "declare" "default" "order" "empty" (<Greatest>/*@bgen(jjtree) #Greatest( true) */
                                                           {
                                                             SimpleNode jjtn001 = new SimpleNode(this, JJTGREATEST);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
                                                           }
                                                           try {
/*@egen*//*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn001,  true);
                                                             jjtc001 = false;
                                                           }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                                           } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  true);
                                                             }
                                                           }
/*@egen*/
                | <Least>/*@bgen(jjtree) #Least( true) */
                         {
                           SimpleNode jjtn002 = new SimpleNode(this, JJTLEAST);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn002,  true);
                           jjtc002 = false;
                         }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  true);
                           }
                         }
/*@egen*/)/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CopyNamespacesDecl()  :
        {/*@bgen(jjtree) CopyNamespacesDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOPYNAMESPACESDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CopyNamespacesDecl */
            try {
/*@egen*/
            "declare" "copy-namespaces" PreserveMode() "," InheritMode()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void PreserveMode()  :
        {/*@bgen(jjtree) PreserveMode */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPRESERVEMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) PreserveMode */
            try {
/*@egen*/
            ("preserve"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("preserve");}
                | "no-preserve"/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/{jjtn000.processValue("no-preserve");})/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void InheritMode()  :
        {/*@bgen(jjtree) InheritMode */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINHERITMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) InheritMode */
            try {
/*@egen*/
            ("inherit"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("inherit");}
                | "no-inherit"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.processValue("no-inherit");})/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DecimalFormatDecl()  :
        {/*@bgen(jjtree) DecimalFormatDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDECIMALFORMATDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DecimalFormatDecl */
            try {
/*@egen*/
            "declare" ( (
    "decimal-format" EQName())
                |  (
    "default" "decimal-format")) (DFPropertyName() "=" <StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                                                                      {
                                                                        SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                                                        boolean jjtc001 = true;
                                                                        jjtree.openNodeScope(jjtn001);
                                                                      }
                                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                                      {
                                                                        jjtree.closeNodeScope(jjtn001,  true);
                                                                        jjtc001 = false;
                                                                      }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                                                      } finally {
                                                                        if (jjtc001) {
                                                                          jjtree.closeNodeScope(jjtn001,  true);
                                                                        }
                                                                      }
/*@egen*/)*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DFPropertyName()  :
        {/*@bgen(jjtree) DFPropertyName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDFPROPERTYNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DFPropertyName */
            try {
/*@egen*/
            ("decimal-separator"/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/{jjtn000.processValue("decimal-separator");}
                | "grouping-separator"/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/{jjtn000.processValue("grouping-separator");}
                | "infinity"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("infinity");}
                | "minus-sign"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.processValue("minus-sign");}
                | "NaN"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("NaN");}
                | "percent"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("percent");}
                | "per-mille"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("per-mille");}
                | "zero-digit"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.processValue("zero-digit");}
                | "digit"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("digit");}
                | "pattern-separator"/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{jjtn000.processValue("pattern-separator");})/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Import()  :
        {/*@bgen(jjtree) Import */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Import */
            try {
/*@egen*/
            (LOOKAHEAD(2) SchemaImport()
                | ModuleImport())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SchemaImport()  :
        {/*@bgen(jjtree) SchemaImport */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SchemaImport */
            try {
/*@egen*/
            "import" "schema" [SchemaPrefix()] URILiteral() ["at" URILiteral() ("," URILiteral())*]/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SchemaPrefix()  :
        {/*@bgen(jjtree) SchemaPrefix */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SchemaPrefix */
            try {
/*@egen*/
            ( (
    "namespace" NCName() "=")
                |  (
    "default" "element" "namespace"))/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ModuleImport()  :
        {/*@bgen(jjtree) ModuleImport */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMODULEIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ModuleImport */
            try {
/*@egen*/
            "import" "module" ["namespace" NCName() "="] URILiteral() ["at" URILiteral() ("," URILiteral())*]/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void NamespaceDecl()  :
        {/*@bgen(jjtree) NamespaceDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAMESPACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) NamespaceDecl */
            try {
/*@egen*/
            "declare" "namespace" NCName() "=" URILiteral()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DefaultNamespaceDecl()  :
        {/*@bgen(jjtree) DefaultNamespaceDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDEFAULTNAMESPACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DefaultNamespaceDecl */
            try {
/*@egen*/
            "declare" "default" ("element"{jjtn000.processValue("element");}
                | "function"{jjtn000.processValue("function");}) "namespace" URILiteral()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AnnotatedDecl()  :
        {/*@bgen(jjtree) AnnotatedDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANNOTATEDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AnnotatedDecl */
            try {
/*@egen*/
            "declare" (Annotation())* (VarDecl()
                | FunctionDecl())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Annotation()  :
        {/*@bgen(jjtree) Annotation */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Annotation */
            try {
/*@egen*/
            "%" EQName() ["(" Literal() ("," Literal())* ")"]/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void VarDecl()  :
        {/*@bgen(jjtree) VarDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) VarDecl */
            try {
/*@egen*/
            "variable" "$" VarName() [TypeDeclaration()] ( (
    ":=" VarValue())
                |  (
    <External>/*@bgen(jjtree) #External( true) */
              {
                SimpleNode jjtn001 = new SimpleNode(this, JJTEXTERNAL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
              }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
              }
/*@egen*/ [":=" VarDefaultValue()]))/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void VarValue()  :
        {/*@bgen(jjtree) VarValue */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) VarValue */
            try {
/*@egen*/
            ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void VarDefaultValue()  :
        {/*@bgen(jjtree) VarDefaultValue */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARDEFAULTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) VarDefaultValue */
            try {
/*@egen*/
            ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ContextItemDecl()  :
        {/*@bgen(jjtree) ContextItemDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONTEXTITEMDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ContextItemDecl */
            try {
/*@egen*/
            "declare" "context" "item" ["as" ItemType()] ( (
    ":=" VarValue())
                |  (
    <External>/*@bgen(jjtree) #External( true) */
              {
                SimpleNode jjtn001 = new SimpleNode(this, JJTEXTERNAL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
              }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
              }
/*@egen*/ [":=" VarDefaultValue()]))/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void FunctionDecl()  :
        {/*@bgen(jjtree) FunctionDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) FunctionDecl */
            try {
/*@egen*/
            "function" FunctionEQName() "(" [ParamList()] ")" ["as" SequenceType()] (FunctionBody()
                | <External>/*@bgen(jjtree) #External( true) */
                            {
                              SimpleNode jjtn001 = new SimpleNode(this, JJTEXTERNAL);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001,  true);
                              jjtc001 = false;
                            }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  true);
                              }
                            }
/*@egen*/)/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ParamList()  :
        {/*@bgen(jjtree) ParamList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ParamList */
            try {
/*@egen*/
            Param() ("," Param())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Param()  :
        {/*@bgen(jjtree) Param */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Param */
            try {
/*@egen*/
            "$" EQName() [TypeDeclaration()]/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void FunctionBody()  :
        {/*@bgen(jjtree) FunctionBody */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) FunctionBody */
            try {
/*@egen*/
            EnclosedExpr()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void EnclosedExpr()  :
        {/*@bgen(jjtree) EnclosedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTENCLOSEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) EnclosedExpr */
            try {
/*@egen*/
            <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                    {
                      SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001,  true);
                      jjtc001 = false;
                    }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  true);
                      }
                    }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                 {
                                                                                   SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                   boolean jjtc002 = true;
                                                                                   jjtree.openNodeScope(jjtn002);
                                                                                 }
                                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                                 {
                                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                                   jjtc002 = false;
                                                                                 }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                 } finally {
                                                                                   if (jjtc002) {
                                                                                     jjtree.closeNodeScope(jjtn002,  true);
                                                                                   }
                                                                                 }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void OptionDecl()  :
        {/*@bgen(jjtree) OptionDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOPTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) OptionDecl */
            try {
/*@egen*/
            "declare" "option" EQName() <StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                                                       {
                                                         SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
                                                       }
                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn001,  true);
                                                         jjtc001 = false;
                                                       }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001,  true);
                                                         }
                                                       }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void QueryBody()  :
        {/*@bgen(jjtree) QueryBody */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQUERYBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) QueryBody */
            try {
/*@egen*/
            Expr()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Expr()  :
        {/*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Expr */
            try {
/*@egen*/
            ExprSingle() ("," ExprSingle())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ExprSingle()        :
        {}
        {
            (LOOKAHEAD(2) FLWORExpr11()
                | LOOKAHEAD(2) QuantifiedExpr()
                | LOOKAHEAD(2) SwitchExpr()
                | LOOKAHEAD(2) TypeswitchExpr()
                | LOOKAHEAD(2) IfExpr()
                | LOOKAHEAD(2) TryCatchExpr()
                | OrExpr())
        }

    void FLWORExpr11()  :
        {/*@bgen(jjtree) FLWORExpr11 */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFLWOREXPR11);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) FLWORExpr11 */
            try {
/*@egen*/
            InitialClause() (IntermediateClause())* ReturnClause()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void InitialClause()  :
        {/*@bgen(jjtree) InitialClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINITIALCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) InitialClause */
            try {
/*@egen*/
            (LOOKAHEAD(2) ForClause()
                | LetClause()
                | LOOKAHEAD(2) WindowClause())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void IntermediateClause()  :
        {/*@bgen(jjtree) IntermediateClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINTERMEDIATECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) IntermediateClause */
            try {
/*@egen*/
            (InitialClause()
                | WhereClause()
                | GroupByClause()
                | OrderByClause()
                | CountClause())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ForClause()  :
        {/*@bgen(jjtree) ForClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ForClause */
            try {
/*@egen*/
            "for" ForBinding() ("," ForBinding())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ForBinding()  :
        {/*@bgen(jjtree) ForBinding */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ForBinding */
            try {
/*@egen*/
            "$" VarName() [TypeDeclaration()] [AllowingEmpty()] [PositionalVar()] "in" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AllowingEmpty()  :
        {/*@bgen(jjtree) AllowingEmpty */
  SimpleNode jjtn000 = new SimpleNode(this, JJTALLOWINGEMPTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AllowingEmpty */
            try {
/*@egen*/
            "allowing" "empty"/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void PositionalVar()  :
        {/*@bgen(jjtree) PositionalVar */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPOSITIONALVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) PositionalVar */
            try {
/*@egen*/
            "at" "$" VarName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void LetClause()  :
        {/*@bgen(jjtree) LetClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTLETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) LetClause */
            try {
/*@egen*/
            "let" LetBinding() ("," LetBinding())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void LetBinding()  :
        {/*@bgen(jjtree) LetBinding */
  SimpleNode jjtn000 = new SimpleNode(this, JJTLETBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) LetBinding */
             try {
/*@egen*/
             (
    "$" VarName() [TypeDeclaration()]) ":=" ExprSingle()/*@bgen(jjtree)*/
             } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 throw (RuntimeException)jjte000;
               }
               if (jjte000 instanceof ParseException) {
                 throw (ParseException)jjte000;
               }
               throw (Error)jjte000;
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
/*@egen*/
        }

    void WindowClause()  :
        {/*@bgen(jjtree) WindowClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWINDOWCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) WindowClause */
            try {
/*@egen*/
            "for" (TumblingWindowClause()
                | SlidingWindowClause())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void TumblingWindowClause()  :
        {/*@bgen(jjtree) TumblingWindowClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTUMBLINGWINDOWCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) TumblingWindowClause */
            try {
/*@egen*/
            "tumbling" "window" "$" VarName() [TypeDeclaration()] "in" ExprSingle() WindowStartCondition() [WindowEndCondition()]/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SlidingWindowClause()  :
        {/*@bgen(jjtree) SlidingWindowClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSLIDINGWINDOWCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SlidingWindowClause */
            try {
/*@egen*/
            "sliding" "window" "$" VarName() [TypeDeclaration()] "in" ExprSingle() WindowStartCondition() WindowEndCondition()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void WindowStartCondition()  :
        {/*@bgen(jjtree) WindowStartCondition */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWINDOWSTARTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) WindowStartCondition */
            try {
/*@egen*/
            "start" WindowVars() "when" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void WindowEndCondition()  :
        {/*@bgen(jjtree) WindowEndCondition */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWINDOWENDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) WindowEndCondition */
            try {
/*@egen*/
            ["only"{jjtn000.processValue("only");}] "end" WindowVars() "when" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void WindowVars()  :
        {/*@bgen(jjtree) WindowVars */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWINDOWVARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) WindowVars */
            try {
/*@egen*/
            ["$" CurrentItem()] [PositionalVar()] [LOOKAHEAD(2) "previous" "$" PreviousItem()] [LOOKAHEAD(2) "next" "$" NextItem()]/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CurrentItem()  :
        {/*@bgen(jjtree) CurrentItem */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCURRENTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CurrentItem */
            try {
/*@egen*/
            EQName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void PreviousItem()  :
        {/*@bgen(jjtree) PreviousItem */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREVIOUSITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) PreviousItem */
            try {
/*@egen*/
            EQName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void NextItem()  :
        {/*@bgen(jjtree) NextItem */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNEXTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) NextItem */
            try {
/*@egen*/
            EQName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CountClause()  :
        {/*@bgen(jjtree) CountClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOUNTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CountClause */
            try {
/*@egen*/
            "count" "$" VarName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void WhereClause()  :
        {/*@bgen(jjtree) WhereClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) WhereClause */
            try {
/*@egen*/
            "where" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void GroupByClause()  :
        {/*@bgen(jjtree) GroupByClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) GroupByClause */
            try {
/*@egen*/
            "group" "by" GroupingSpecList()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void GroupingSpecList()  :
        {/*@bgen(jjtree) GroupingSpecList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTGROUPINGSPECLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) GroupingSpecList */
            try {
/*@egen*/
            GroupingSpec() ("," GroupingSpec())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void GroupingSpec()  :
        {/*@bgen(jjtree) GroupingSpec */
  SimpleNode jjtn000 = new SimpleNode(this, JJTGROUPINGSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) GroupingSpec */
            try {
/*@egen*/
            GroupingVariable() [[TypeDeclaration()] ":=" ExprSingle()] ["collation" URILiteral()]/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void GroupingVariable()  :
        {/*@bgen(jjtree) GroupingVariable */
  SimpleNode jjtn000 = new SimpleNode(this, JJTGROUPINGVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) GroupingVariable */
            try {
/*@egen*/
            "$" VarName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void OrderByClause()  :
        {/*@bgen(jjtree) OrderByClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) OrderByClause */
            try {
/*@egen*/
            ( (
    "order" "by")
                |  (
    "stable"{jjtn000.processValue("stable");} "order" "by")) OrderSpecList()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void OrderSpecList()  :
        {/*@bgen(jjtree) OrderSpecList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDERSPECLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) OrderSpecList */
            try {
/*@egen*/
            OrderSpec() ("," OrderSpec())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void OrderSpec()  :
        {/*@bgen(jjtree) OrderSpec */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDERSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) OrderSpec */
            try {
/*@egen*/
            ExprSingle() OrderModifier()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void OrderModifier()  :
        {/*@bgen(jjtree) OrderModifier */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDERMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) OrderModifier */
            try {
/*@egen*/
            [(<Ascending>/*@bgen(jjtree) #Ascending( true) */
                         {
                           SimpleNode jjtn001 = new SimpleNode(this, JJTASCENDING);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001,  true);
                           jjtc001 = false;
                         }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  true);
                           }
                         }
/*@egen*/
                | <Descending>/*@bgen(jjtree) #Descending( true) */
                              {
                                SimpleNode jjtn002 = new SimpleNode(this, JJTDESCENDING);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn002,  true);
                                jjtc002 = false;
                              }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  true);
                                }
                              }
/*@egen*/)] ["empty" (<Greatest>/*@bgen(jjtree) #Greatest( true) */
                                                                                                      {
                                                                                                        SimpleNode jjtn003 = new SimpleNode(this, JJTGREATEST);
                                                                                                        boolean jjtc003 = true;
                                                                                                        jjtree.openNodeScope(jjtn003);
                                                                                                      }
                                                                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                      {
                                                                                                        jjtree.closeNodeScope(jjtn003,  true);
                                                                                                        jjtc003 = false;
                                                                                                      }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                                                                      } finally {
                                                                                                        if (jjtc003) {
                                                                                                          jjtree.closeNodeScope(jjtn003,  true);
                                                                                                        }
                                                                                                      }
/*@egen*/
                | <Least>/*@bgen(jjtree) #Least( true) */
                         {
                           SimpleNode jjtn004 = new SimpleNode(this, JJTLEAST);
                           boolean jjtc004 = true;
                           jjtree.openNodeScope(jjtn004);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn004,  true);
                           jjtc004 = false;
                         }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc004) {
                             jjtree.closeNodeScope(jjtn004,  true);
                           }
                         }
/*@egen*/)] ["collation" URILiteral()]/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ReturnClause()  :
        {/*@bgen(jjtree) ReturnClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTRETURNCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ReturnClause */
            try {
/*@egen*/
            "return" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void QuantifiedExpr()  :
        {/*@bgen(jjtree) QuantifiedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQUANTIFIEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) QuantifiedExpr */
            try {
/*@egen*/
            ("some"{jjtn000.processValue("some");}
                | "every"{jjtn000.processValue("every");}) "$" VarName() [TypeDeclaration()] "in" ExprSingle() ("," "$" VarName() [TypeDeclaration()] "in" ExprSingle())* "satisfies" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SwitchExpr()  :
        {/*@bgen(jjtree) SwitchExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSWITCHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SwitchExpr */
            try {
/*@egen*/
            "switch" "(" Expr() ")" (SwitchCaseClause())+  "default" "return" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SwitchCaseClause()  :
        {/*@bgen(jjtree) SwitchCaseClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSWITCHCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SwitchCaseClause */
            try {
/*@egen*/
            ("case" SwitchCaseOperand())+  "return" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SwitchCaseOperand()  :
        {/*@bgen(jjtree) SwitchCaseOperand */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSWITCHCASEOPERAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SwitchCaseOperand */
            try {
/*@egen*/
            ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void TypeswitchExpr()  :
        {/*@bgen(jjtree) TypeswitchExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPESWITCHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) TypeswitchExpr */
            try {
/*@egen*/
            "typeswitch" "(" Expr() ")" (CaseClause())+  "default" ["$" VarName()] "return" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CaseClause()  :
        {/*@bgen(jjtree) CaseClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CaseClause */
            try {
/*@egen*/
            "case" ["$" VarName() "as"] SequenceTypeUnion() "return" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SequenceTypeUnion()  :
        {/*@bgen(jjtree) SequenceTypeUnion */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSEQUENCETYPEUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SequenceTypeUnion */
            try {
/*@egen*/
            SequenceType() ("|" SequenceType())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void IfExpr()  :
        {/*@bgen(jjtree) IfExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) IfExpr */
            try {
/*@egen*/
            "if" "(" Expr() ")" "then" ExprSingle() "else" ExprSingle()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void TryCatchExpr()  :
        {/*@bgen(jjtree) TryCatchExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTRYCATCHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) TryCatchExpr */
            try {
/*@egen*/
            TryClause() (LOOKAHEAD(5) CatchClause())+/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/ 
        }

    void TryClause()  :
        {/*@bgen(jjtree) TryClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTRYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) TryClause */
            try {
/*@egen*/
            "try" <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                          {
                            SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001,  true);
                            jjtc001 = false;
                          }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  true);
                            }
                          }
/*@egen*/ TryTargetExpr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                                {
                                                                                                  SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                                  boolean jjtc002 = true;
                                                                                                  jjtree.openNodeScope(jjtn002);
                                                                                                }
                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                {
                                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                                  jjtc002 = false;
                                                                                                }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                                } finally {
                                                                                                  if (jjtc002) {
                                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                                  }
                                                                                                }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void TryTargetExpr()  :
        {/*@bgen(jjtree) TryTargetExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTRYTARGETEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) TryTargetExpr */
            try {
/*@egen*/
            Expr()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CatchClause()  :
        {/*@bgen(jjtree) CatchClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCATCHCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CatchClause */
            try {
/*@egen*/
            "catch" CatchErrorList() <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                                             {
                                               SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
                                             }
                                             try {
/*@egen*//*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn001,  true);
                                               jjtc001 = false;
                                             }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001,  true);
                                               }
                                             }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                                          {
                                                                                                            SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                                            boolean jjtc002 = true;
                                                                                                            jjtree.openNodeScope(jjtn002);
                                                                                                          }
                                                                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                          {
                                                                                                            jjtree.closeNodeScope(jjtn002,  true);
                                                                                                            jjtc002 = false;
                                                                                                          }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                                          } finally {
                                                                                                            if (jjtc002) {
                                                                                                              jjtree.closeNodeScope(jjtn002,  true);
                                                                                                            }
                                                                                                          }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CatchErrorList()  :
        {/*@bgen(jjtree) CatchErrorList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCATCHERRORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CatchErrorList */
            try {
/*@egen*/
            NameTest() ("|" NameTest())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void OperatorExpr()         : 
        {}
        {
            OrExpr()
        }

        void OrExpr()              : 
            {/*@bgen(jjtree) #OrExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #OrExpr(> 1) */
                try {
/*@egen*/
                AndExpr() ("or"{
                        binaryTokenStack.push(token);
                    } AndExpr()/*@bgen(jjtree) #OrExpr( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(this, JJTOREXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        throw e;
                    }
                }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void AndExpr()               : 
            {/*@bgen(jjtree) #AndExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #AndExpr(> 1) */
                try {
/*@egen*/
                ComparisonExpr() ("and"{
                        binaryTokenStack.push(token);
                    } ComparisonExpr()/*@bgen(jjtree) #AndExpr( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(this, JJTANDEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        throw e;
                    }
                }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void ComparisonExpr()                      : 
            {/*@bgen(jjtree) #ComparisonExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPARISONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #ComparisonExpr(> 1) */
                try {
/*@egen*/
                StringConcatExpr() ((ValueComp()
                | GeneralComp()
                | NodeComp()) StringConcatExpr()/*@bgen(jjtree) #ComparisonExpr( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(this, JJTCOMPARISONEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        throw e;
                    }
                }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void StringConcatExpr()                        : 
            {/*@bgen(jjtree) #StringConcatExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTRINGCONCATEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #StringConcatExpr(> 1) */
                try {
/*@egen*/
                RangeExpr() ("||"{
                        binaryTokenStack.push(token);
                    } RangeExpr()/*@bgen(jjtree) #StringConcatExpr( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGCONCATEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        throw e;
                    }
                }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void RangeExpr()                 : 
            {/*@bgen(jjtree) #RangeExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTRANGEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #RangeExpr(> 1) */
                try {
/*@egen*/
                AdditiveExpr() ("to"{
                        binaryTokenStack.push(token);
                    } AdditiveExpr()/*@bgen(jjtree) #RangeExpr( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(this, JJTRANGEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        throw e;
                    }
                }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void AdditiveExpr()                    : 
            {/*@bgen(jjtree) #AdditiveExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTADDITIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #AdditiveExpr(> 1) */
                try {
/*@egen*/
                MultiplicativeExpr() ((<Plus>
                
                {binaryTokenStack.push(token);}
            
                | <Minus>
                
                {binaryTokenStack.push(token);}
            ) MultiplicativeExpr()/*@bgen(jjtree) #AdditiveExpr( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(this, JJTADDITIVEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        throw e;
                    }
                }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void MultiplicativeExpr()                          : 
            {/*@bgen(jjtree) #MultiplicativeExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMULTIPLICATIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #MultiplicativeExpr(> 1) */
                try {
/*@egen*/
                UnionExpr() (("*"{
                        binaryTokenStack.push(token);
                    }
                | "div"{
                        binaryTokenStack.push(token);
                    }
                | "idiv"{
                        binaryTokenStack.push(token);
                    }
                | "mod"{
                        binaryTokenStack.push(token);
                    }) UnionExpr()/*@bgen(jjtree) #MultiplicativeExpr( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(this, JJTMULTIPLICATIVEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        throw e;
                    }
                }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void UnionExpr()                 : 
            {/*@bgen(jjtree) #UnionExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTUNIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #UnionExpr(> 1) */
                try {
/*@egen*/
                IntersectExceptExpr() (("union"{
                        binaryTokenStack.push(token);
                    }
                | "|"{
                        binaryTokenStack.push(token);
                    }) IntersectExceptExpr()/*@bgen(jjtree) #UnionExpr( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(this, JJTUNIONEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        throw e;
                    }
                }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void IntersectExceptExpr()                           : 
            {/*@bgen(jjtree) #IntersectExceptExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINTERSECTEXCEPTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #IntersectExceptExpr(> 1) */
                try {
/*@egen*/
                InstanceofExpr() (("intersect"{
                        binaryTokenStack.push(token);
                    }
                | "except"{
                        binaryTokenStack.push(token);
                    }) InstanceofExpr()/*@bgen(jjtree) #IntersectExceptExpr( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(this, JJTINTERSECTEXCEPTEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        throw e;
                    }
                }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void InstanceofExpr()                      : 
            {/*@bgen(jjtree) #InstanceofExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINSTANCEOFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #InstanceofExpr(> 1) */
                try {
/*@egen*/
                TreatExpr() ( (
    "instance" "of" SequenceType()))?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void TreatExpr()                 : 
            {/*@bgen(jjtree) #TreatExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTREATEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #TreatExpr(> 1) */
                try {
/*@egen*/
                CastableExpr() ( (
    "treat" "as" SequenceType()))?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void CastableExpr()                    : 
            {/*@bgen(jjtree) #CastableExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASTABLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #CastableExpr(> 1) */
                try {
/*@egen*/
                CastExpr() ( (
    "castable" "as" SingleType()))?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void CastExpr()                : 
            {/*@bgen(jjtree) #CastExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
            {/*@bgen(jjtree) #CastExpr(> 1) */
                try {
/*@egen*/
                UnaryExpr() ( (
    "cast" "as" SingleType()))?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/
            }

        void UnaryExpr()                       : 
            {/*@bgen(jjtree) #UnaryExpr( keepUnary) */
             SimpleNode jjtn000 = new SimpleNode(this, JJTUNARYEXPR);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/boolean keepUnary=false;}
            {/*@bgen(jjtree) #UnaryExpr( keepUnary) */
                try {
/*@egen*/
                ((<Minus>/*@bgen(jjtree) #Minus( true) */
                         {
                           SimpleNode jjtn001 = new SimpleNode(this, JJTMINUS);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001,  true);
                           jjtc001 = false;
                         }
/*@egen*/{keepUnary=true;processToken(jjtn001, token);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  true);
                           }
                         }
/*@egen*/
                | <Plus>/*@bgen(jjtree) #Plus( true) */
                        {
                          SimpleNode jjtn002 = new SimpleNode(this, JJTPLUS);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002,  true);
                          jjtc002 = false;
                        }
/*@egen*/{keepUnary=true;processToken(jjtn002, token);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  true);
                          }
                        }
/*@egen*/))* ValueExpr()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000,  keepUnary);
                  }
                }
/*@egen*/
            }

        void ValueExpr()       : 
            {}
            {
                (LOOKAHEAD(2) ValidateExpr()
                | ExtensionExpr()
                | SimpleMapExpr())
            }

        void GeneralComp()        :
        {}
        {
            ("="{
                        binaryTokenStack.push(token);
                    }
                | "!="{
                        binaryTokenStack.push(token);
                    }
                | <LeftAngleBracket>
                        {/* Careful! */ token_source.SwitchTo(DEFAULT); token_source.stateStack.pop(); }
                    
                
                {binaryTokenStack.push(token);}
            
                | "<="{
                        binaryTokenStack.push(token);
                    }
                | ">"{
                        binaryTokenStack.push(token);
                    }
                | ">="{
                        binaryTokenStack.push(token);
                    })
        }

    void ValueComp()        :
        {}
        {
            ("eq"{
                        binaryTokenStack.push(token);
                    }
                | "ne"{
                        binaryTokenStack.push(token);
                    }
                | "lt"{
                        binaryTokenStack.push(token);
                    }
                | "le"{
                        binaryTokenStack.push(token);
                    }
                | "gt"{
                        binaryTokenStack.push(token);
                    }
                | "ge"{
                        binaryTokenStack.push(token);
                    })
        }

    void NodeComp()        :
        {}
        {
            ("is"{
                        binaryTokenStack.push(token);
                    }
                | "<<"{
                        binaryTokenStack.push(token);
                    }
                | ">>"{
                        binaryTokenStack.push(token);
                    })
        }

    void ValidateExpr()  :
        {/*@bgen(jjtree) ValidateExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVALIDATEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ValidateExpr */
            try {
/*@egen*/
            "validate" [(ValidationMode()
                |  (
    "type" TypeName()))] <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                                 {
                                   SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                   jjtc001 = false;
                                 }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                   }
                                 }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                              {
                                                                                                SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                                boolean jjtc002 = true;
                                                                                                jjtree.openNodeScope(jjtn002);
                                                                                              }
                                                                                              try {
/*@egen*//*@bgen(jjtree)*/
                                                                                              {
                                                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                                                jjtc002 = false;
                                                                                              }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                              } finally {
                                                                                                if (jjtc002) {
                                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                                }
                                                                                              }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ValidationMode()  :
        {/*@bgen(jjtree) ValidationMode */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVALIDATIONMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ValidationMode */
            try {
/*@egen*/
            ("lax"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.processValue("lax");}
                | "strict"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("strict");})/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ExtensionExpr()  :
        {/*@bgen(jjtree) ExtensionExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXTENSIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ExtensionExpr */
            try {
/*@egen*/
            (Pragma())+  <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                                 {
                                   SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                   jjtc001 = false;
                                 }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                   }
                                 }
/*@egen*/ [Expr()] <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                                {
                                                                                                  SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                                  boolean jjtc002 = true;
                                                                                                  jjtree.openNodeScope(jjtn002);
                                                                                                }
                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                {
                                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                                  jjtc002 = false;
                                                                                                }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                                } finally {
                                                                                                  if (jjtc002) {
                                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                                  }
                                                                                                }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Pragma()  :
        {/*@bgen(jjtree) Pragma */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPRAGMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Pragma */
            try {
/*@egen*/
            <PragmaOpen>/*@bgen(jjtree) #PragmaOpen( true) */
                        {
                          SimpleNode jjtn001 = new SimpleNode(this, JJTPRAGMAOPEN);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn001,  true);
                          jjtc001 = false;
                        }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  true);
                          }
                        }
/*@egen*/ [<S>/*@bgen(jjtree) #S( true) */
                                                                              {
                                                                                SimpleNode jjtn002 = new SimpleNode(this, JJTS);
                                                                                boolean jjtc002 = true;
                                                                                jjtree.openNodeScope(jjtn002);
                                                                              }
                                                                              try {
/*@egen*//*@bgen(jjtree)*/
                                                                              {
                                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                                jjtc002 = false;
                                                                              }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                              } finally {
                                                                                if (jjtc002) {
                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                }
                                                                              }
/*@egen*/] EQName() [<S>/*@bgen(jjtree) #S( true) */
                                                                                                                                     {
                                                                                                                                       SimpleNode jjtn003 = new SimpleNode(this, JJTS);
                                                                                                                                       boolean jjtc003 = true;
                                                                                                                                       jjtree.openNodeScope(jjtn003);
                                                                                                                                     }
                                                                                                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                     {
                                                                                                                                       jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                       jjtc003 = false;
                                                                                                                                     }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                                                                                                     } finally {
                                                                                                                                       if (jjtc003) {
                                                                                                                                         jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                       }
                                                                                                                                     }
/*@egen*/ PragmaContents()] <PragmaClose>/*@bgen(jjtree) #PragmaClose( true) */
                                                                                                                                                                                                             {
                                                                                                                                                                                                               SimpleNode jjtn004 = new SimpleNode(this, JJTPRAGMACLOSE);
                                                                                                                                                                                                               boolean jjtc004 = true;
                                                                                                                                                                                                               jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                             }
                                                                                                                                                                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                             {
                                                                                                                                                                                                               jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                               jjtc004 = false;
                                                                                                                                                                                                             }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                             } finally {
                                                                                                                                                                                                               if (jjtc004) {
                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                               }
                                                                                                                                                                                                             }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void PragmaContents()  :
        {/*@bgen(jjtree) PragmaContents */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPRAGMACONTENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) PragmaContents */
            try {
/*@egen*/
            (<Char>/*@bgen(jjtree) #Char( true) */
                   {
                     SimpleNode jjtn001 = new SimpleNode(this, JJTCHAR);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                   }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
                   }
/*@egen*/)*/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SimpleMapExpr()                      :
        {/*@bgen(jjtree) #SimpleMapExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSIMPLEMAPEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) #SimpleMapExpr(> 1) */
            try {
/*@egen*/
            PathExpr() ("!" PathExpr())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
              }
            }
/*@egen*/
        }

    void PathExpr()  :
        {/*@bgen(jjtree) PathExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) PathExpr */
            try {
/*@egen*/
            ( (
    <Slash>/*@bgen(jjtree) #Slash( true) */
           {
             SimpleNode jjtn001 = new SimpleNode(this, JJTSLASH);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn001,  true);
             jjtc001 = false;
           }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  true);
             }
           }
/*@egen*/ [LOOKAHEAD(1) RelativePathExpr()])
                |  (
    <SlashSlash>/*@bgen(jjtree) #SlashSlash( true) */
                {
                  SimpleNode jjtn002 = new SimpleNode(this, JJTSLASHSLASH);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn002,  true);
                  jjtc002 = false;
                }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  true);
                  }
                }
/*@egen*/ RelativePathExpr())
                | RelativePathExpr())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void RelativePathExpr()        :
        {}
        {
            StepExpr() ((<Slash>/*@bgen(jjtree) #Slash( true) */
                                {
                                  SimpleNode jjtn001 = new SimpleNode(this, JJTSLASH);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                  jjtc001 = false;
                                }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  true);
                                  }
                                }
/*@egen*/
                | <SlashSlash>/*@bgen(jjtree) #SlashSlash( true) */
                              {
                                SimpleNode jjtn002 = new SimpleNode(this, JJTSLASHSLASH);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn002,  true);
                                jjtc002 = false;
                              }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  true);
                                }
                              }
/*@egen*/) StepExpr())*
        }

    void StepExpr()        :
        {}
        {
            (LOOKAHEAD(3) PostfixExpr()
                | AxisStep())
        }

    void AxisStep()  :
        {/*@bgen(jjtree) AxisStep */
  SimpleNode jjtn000 = new SimpleNode(this, JJTAXISSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AxisStep */
            try {
/*@egen*/
            (LOOKAHEAD(2) ReverseStep()
                | ForwardStep()) PredicateList()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ForwardStep()        :
        {}
        {
            (LOOKAHEAD(2)  (
    ForwardAxis() NodeTest())
                | AbbrevForwardStep())
        }

    void ForwardAxis()  :
        {/*@bgen(jjtree) ForwardAxis */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORWARDAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ForwardAxis */
            try {
/*@egen*/
            ( (
    "child"{jjtn000.processValue("child");} "::")
                |  (
    "descendant"{jjtn000.processValue("descendant");} "::")
                |  (
    "attribute"{jjtn000.processValue("attribute");} "::")
                |  (
    "self"{jjtn000.processValue("self");} "::")
                |  (
    "descendant-or-self"{jjtn000.processValue("descendant-or-self");} "::")
                |  (
    "following-sibling"{jjtn000.processValue("following-sibling");} "::")
                |  (
    "following"{jjtn000.processValue("following");} "::")
                |  (
    "namespace"{jjtn000.processValue("namespace");} "::"))/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AbbrevForwardStep()  :
        {/*@bgen(jjtree) AbbrevForwardStep */
  SimpleNode jjtn000 = new SimpleNode(this, JJTABBREVFORWARDSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AbbrevForwardStep */
            try {
/*@egen*/
            ["@"{jjtn000.processValue("@");}] NodeTest()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ReverseStep()        :
        {}
        {
            ( (
    ReverseAxis() NodeTest())
                | AbbrevReverseStep())
        }

    void ReverseAxis()  :
        {/*@bgen(jjtree) ReverseAxis */
  SimpleNode jjtn000 = new SimpleNode(this, JJTREVERSEAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ReverseAxis */
            try {
/*@egen*/
            ( (
    "parent"{jjtn000.processValue("parent");} "::")
                |  (
    "ancestor"{jjtn000.processValue("ancestor");} "::")
                |  (
    "preceding-sibling"{jjtn000.processValue("preceding-sibling");} "::")
                |  (
    "preceding"{jjtn000.processValue("preceding");} "::")
                |  (
    "ancestor-or-self"{jjtn000.processValue("ancestor-or-self");} "::"))/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AbbrevReverseStep()  :
        {/*@bgen(jjtree) AbbrevReverseStep */
  SimpleNode jjtn000 = new SimpleNode(this, JJTABBREVREVERSESTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AbbrevReverseStep */
            try {
/*@egen*/
            ".."/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void NodeTest()  :
        {/*@bgen(jjtree) NodeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNODETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) NodeTest */
            try {
/*@egen*/
            (LOOKAHEAD(2) KindTest()
                | NameTest())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void NameTest()  :
        {/*@bgen(jjtree) NameTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAMETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) NameTest */
            try {
/*@egen*/
            (EQName()
                | Wildcard())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Wildcard()  :
        {/*@bgen(jjtree) Wildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Wildcard */
            try {
/*@egen*/
            ("*"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.processValue("*");}
                | <NCNameColonStar>/*@bgen(jjtree) #NCNameColonStar( true) */
                                   {
                                     SimpleNode jjtn001 = new SimpleNode(this, JJTNCNAMECOLONSTAR);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                     jjtc001 = false;
                                   }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  true);
                                     }
                                   }
/*@egen*/
                | <StarColonNCName>/*@bgen(jjtree) #StarColonNCName( true) */
                                   {
                                     SimpleNode jjtn002 = new SimpleNode(this, JJTSTARCOLONNCNAME);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn002,  true);
                                     jjtc002 = false;
                                   }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002,  true);
                                     }
                                   }
/*@egen*/
                | <URIQualifiedStar>/*@bgen(jjtree) #URIQualifiedStar( true) */
                                    {
                                      SimpleNode jjtn003 = new SimpleNode(this, JJTURIQUALIFIEDSTAR);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn003,  true);
                                      jjtc003 = false;
                                    }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003,  true);
                                      }
                                    }
/*@egen*/)/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void PostfixExpr()  :
        {/*@bgen(jjtree) PostfixExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPOSTFIXEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) PostfixExpr */
            try {
/*@egen*/
            PrimaryExpr() ((Predicate()
                | ArgumentList()))*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ArgumentList()  :
        {/*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ArgumentList */
            try {
/*@egen*/
            "(" [Argument() ("," Argument())*] ")"/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void PredicateList()                      :
        {/*@bgen(jjtree) #PredicateList(> 0) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREDICATELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) #PredicateList(> 0) */
            try {
/*@egen*/
            (Predicate())*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
              }
            }
/*@egen*/
        }

    void Predicate()  :
        {/*@bgen(jjtree) Predicate */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Predicate */
            try {
/*@egen*/
            "[" Expr() "]"/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void PrimaryExpr()        :
        {}
        {
            (Literal()
                | VarRef()
                | ParenthesizedExpr()
                | ContextItemExpr()
                | LOOKAHEAD(2) FunctionCall()
                | LOOKAHEAD(2) OrderedExpr()
                | LOOKAHEAD(2) UnorderedExpr()
                | LOOKAHEAD(2) Constructor()
                | FunctionItemExpr())
        }

    void Literal()        :
        {}
        {
            (NumericLiteral()
                | <StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                                 {
                                   SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                   jjtc001 = false;
                                 }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                   }
                                 }
/*@egen*/)
        }

    void NumericLiteral()        :
        {}
        {
            (<IntegerLiteral>/*@bgen(jjtree) #IntegerLiteral( true) */
                             {
                               SimpleNode jjtn001 = new SimpleNode(this, JJTINTEGERLITERAL);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn001,  true);
                               jjtc001 = false;
                             }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  true);
                               }
                             }
/*@egen*/
                | <DecimalLiteral>/*@bgen(jjtree) #DecimalLiteral( true) */
                                  {
                                    SimpleNode jjtn002 = new SimpleNode(this, JJTDECIMALLITERAL);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn002,  true);
                                    jjtc002 = false;
                                  }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002,  true);
                                    }
                                  }
/*@egen*/
                | <DoubleLiteral>/*@bgen(jjtree) #DoubleLiteral( true) */
                                 {
                                   SimpleNode jjtn003 = new SimpleNode(this, JJTDOUBLELITERAL);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn003,  true);
                                   jjtc003 = false;
                                 }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  true);
                                   }
                                 }
/*@egen*/)
        }

    void VarRef()        :
        {}
        {
            "$" VarName()
        }

    void VarName()  :
        {/*@bgen(jjtree) VarName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) VarName */
            try {
/*@egen*/
            EQName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ParenthesizedExpr()  :
        {/*@bgen(jjtree) ParenthesizedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARENTHESIZEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ParenthesizedExpr */
            try {
/*@egen*/
            "(" [Expr()] ")"/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ContextItemExpr()  :
        {/*@bgen(jjtree) ContextItemExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONTEXTITEMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ContextItemExpr */
            try {
/*@egen*/
            "."/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.processValue(".");}/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void OrderedExpr()  :
        {/*@bgen(jjtree) OrderedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDEREDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) OrderedExpr */
            try {
/*@egen*/
            "ordered" <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                              {
                                SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001,  true);
                                jjtc001 = false;
                              }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                }
                              }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                           {
                                                                                             SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                             boolean jjtc002 = true;
                                                                                             jjtree.openNodeScope(jjtn002);
                                                                                           }
                                                                                           try {
/*@egen*//*@bgen(jjtree)*/
                                                                                           {
                                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                                             jjtc002 = false;
                                                                                           }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                           } finally {
                                                                                             if (jjtc002) {
                                                                                               jjtree.closeNodeScope(jjtn002,  true);
                                                                                             }
                                                                                           }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void UnorderedExpr()  :
        {/*@bgen(jjtree) UnorderedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTUNORDEREDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) UnorderedExpr */
            try {
/*@egen*/
            "unordered" <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                                {
                                  SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                  jjtc001 = false;
                                }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  true);
                                  }
                                }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                             {
                                                                                               SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                               boolean jjtc002 = true;
                                                                                               jjtree.openNodeScope(jjtn002);
                                                                                             }
                                                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                                                             {
                                                                                               jjtree.closeNodeScope(jjtn002,  true);
                                                                                               jjtc002 = false;
                                                                                             }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                             } finally {
                                                                                               if (jjtc002) {
                                                                                                 jjtree.closeNodeScope(jjtn002,  true);
                                                                                               }
                                                                                             }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void FunctionCall()  :
        {/*@bgen(jjtree) FunctionCall */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) FunctionCall */
            try {
/*@egen*/
            FunctionEQName() ArgumentList()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Argument()  :
        {/*@bgen(jjtree) Argument */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Argument */
            try {
/*@egen*/
            (ExprSingle()
                | ArgumentPlaceholder())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ArgumentPlaceholder()  :
        {/*@bgen(jjtree) ArgumentPlaceholder */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGUMENTPLACEHOLDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ArgumentPlaceholder */
            try {
/*@egen*/
            "?"/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.processValue("?");}/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Constructor()  :
        {/*@bgen(jjtree) Constructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Constructor */
            try {
/*@egen*/
            (DirectConstructor()
                | ComputedConstructor())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DirectConstructor()  :
        {/*@bgen(jjtree) DirectConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDIRECTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DirectConstructor */
            try {
/*@egen*/
            (DirElemConstructor()
                | DirCommentConstructor()
                | DirPIConstructor())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DirElemConstructor()  :
        {/*@bgen(jjtree) DirElemConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDIRELEMCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DirElemConstructor */
            try {
/*@egen*/
            <LeftAngleBracket>/*@bgen(jjtree) #LeftAngleBracket( true) */
                              {
                                SimpleNode jjtn001 = new SimpleNode(this, JJTLEFTANGLEBRACKET);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001,  true);
                                jjtc001 = false;
                              }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                }
                              }
/*@egen*/ <TagQName>/*@bgen(jjtree) #TagQName( true) */
                                                                                                {
                                                                                                  SimpleNode jjtn002 = new SimpleNode(this, JJTTAGQNAME);
                                                                                                  boolean jjtc002 = true;
                                                                                                  jjtree.openNodeScope(jjtn002);
                                                                                                }
                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                {
                                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                                  jjtc002 = false;
                                                                                                }
/*@egen*/{_elementStack.push(token.image); processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                                } finally {
                                                                                                  if (jjtc002) {
                                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                                  }
                                                                                                }
/*@egen*/ DirAttributeList() (<EmptyTagClose>/*@bgen(jjtree) #EmptyTagClose( true) */
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      SimpleNode jjtn003 = new SimpleNode(this, JJTEMPTYTAGCLOSE);
                                                                                                                                                                                                                      boolean jjtc003 = true;
                                                                                                                                                                                                                      jjtree.openNodeScope(jjtn003);
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                                                      jjtc003 = false;
                                                                                                                                                                                                                    }
/*@egen*/{_elementStack.pop(); processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                    } finally {
                                                                                                                                                                                                                      if (jjtc003) {
                                                                                                                                                                                                                        jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
/*@egen*/
                |  (
    <StartTagClose>/*@bgen(jjtree) #StartTagClose( true) */
                   {
                     SimpleNode jjtn004 = new SimpleNode(this, JJTSTARTTAGCLOSE);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn004,  true);
                     jjtc004 = false;
                   }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004,  true);
                     }
                   }
/*@egen*/ (DirElemContent())* <EndTagOpen>{processToken(((SimpleNode)jjtree.peekNode()), token);} <EndTagQName>/*@bgen(jjtree) #EndTagQName( true) */
                                                                                                                                                                             {
                                                                                                                                                                               SimpleNode jjtn005 = new SimpleNode(this, JJTENDTAGQNAME);
                                                                                                                                                                               boolean jjtc005 = true;
                                                                                                                                                                               jjtree.openNodeScope(jjtn005);
                                                                                                                                                                             }
                                                                                                                                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                             {
                                                                                                                                                                               jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                               jjtc005 = false;
                                                                                                                                                                             }
/*@egen*/{if(!token.image.equals(_elementStack.pop())) throw new ParseException("Error: In a direct element constructor, the name used in the end tag must exactly match the name used in the corresponding start tag, including its prefix or absence of a prefix. Line: " + token.beginLine); processToken(jjtn005, token);}/*@bgen(jjtree)*/
                                                                                                                                                                             } finally {
                                                                                                                                                                               if (jjtc005) {
                                                                                                                                                                                 jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                               }
                                                                                                                                                                             }
/*@egen*/ [<S>{processToken(((SimpleNode)jjtree.peekNode()), token);}] <EndTagClose>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
}
/*@egen*/{processToken(((SimpleNode)jjtree.peekNode()), token);}))/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DirAttributeList()  :
        {/*@bgen(jjtree) DirAttributeList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDIRATTRIBUTELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DirAttributeList */
            try {
/*@egen*/
            (<S>/*@bgen(jjtree) #S( true) */
                {
                  SimpleNode jjtn001 = new SimpleNode(this, JJTS);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  true);
                  jjtc001 = false;
                }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  true);
                  }
                }
/*@egen*/ [<TagQName>/*@bgen(jjtree) #TagQName( true) */
                                                                    {
                                                                      SimpleNode jjtn002 = new SimpleNode(this, JJTTAGQNAME);
                                                                      boolean jjtc002 = true;
                                                                      jjtree.openNodeScope(jjtn002);
                                                                    }
                                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                                    {
                                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                                      jjtc002 = false;
                                                                    }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                    } finally {
                                                                      if (jjtc002) {
                                                                        jjtree.closeNodeScope(jjtn002,  true);
                                                                      }
                                                                    }
/*@egen*/ [<S>/*@bgen(jjtree) #S( true) */
                                                                                                                        {
                                                                                                                          SimpleNode jjtn003 = new SimpleNode(this, JJTS);
                                                                                                                          boolean jjtc003 = true;
                                                                                                                          jjtree.openNodeScope(jjtn003);
                                                                                                                        }
                                                                                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                        {
                                                                                                                          jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                          jjtc003 = false;
                                                                                                                        }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                                                                                        } finally {
                                                                                                                          if (jjtc003) {
                                                                                                                            jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                          }
                                                                                                                        }
/*@egen*/] <ValueIndicator>/*@bgen(jjtree) #ValueIndicator( true) */
                                                                                                                                                                                  {
                                                                                                                                                                                    SimpleNode jjtn004 = new SimpleNode(this, JJTVALUEINDICATOR);
                                                                                                                                                                                    boolean jjtc004 = true;
                                                                                                                                                                                    jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                  }
                                                                                                                                                                                  try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                  {
                                                                                                                                                                                    jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                    jjtc004 = false;
                                                                                                                                                                                  }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
                                                                                                                                                                                  } finally {
                                                                                                                                                                                    if (jjtc004) {
                                                                                                                                                                                      jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                    }
                                                                                                                                                                                  }
/*@egen*/ [<S>/*@bgen(jjtree) #S( true) */
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              SimpleNode jjtn005 = new SimpleNode(this, JJTS);
                                                                                                                                                                                                                                              boolean jjtc005 = true;
                                                                                                                                                                                                                                              jjtree.openNodeScope(jjtn005);
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                              jjtc005 = false;
                                                                                                                                                                                                                                            }
/*@egen*/{processToken(jjtn005, token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                            } finally {
                                                                                                                                                                                                                                              if (jjtc005) {
                                                                                                                                                                                                                                                jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
/*@egen*/] DirAttributeValue()])*/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DirAttributeValue()  :
        {/*@bgen(jjtree) DirAttributeValue */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDIRATTRIBUTEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DirAttributeValue */
            try {
/*@egen*/
            ( (
    <OpenQuot>/*@bgen(jjtree) #OpenQuot( true) */
              {
                SimpleNode jjtn001 = new SimpleNode(this, JJTOPENQUOT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
              }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
              }
/*@egen*/ ((<EscapeQuot>/*@bgen(jjtree) #EscapeQuot( true) */
                                                                            {
                                                                              SimpleNode jjtn002 = new SimpleNode(this, JJTESCAPEQUOT);
                                                                              boolean jjtc002 = true;
                                                                              jjtree.openNodeScope(jjtn002);
                                                                            }
                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                            {
                                                                              jjtree.closeNodeScope(jjtn002,  true);
                                                                              jjtc002 = false;
                                                                            }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                            } finally {
                                                                              if (jjtc002) {
                                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                              }
                                                                            }
/*@egen*/
                | QuotAttrValueContent()))* <CloseQuot>/*@bgen(jjtree) #CloseQuot( true) */
                                                       {
                                                         SimpleNode jjtn003 = new SimpleNode(this, JJTCLOSEQUOT);
                                                         boolean jjtc003 = true;
                                                         jjtree.openNodeScope(jjtn003);
                                                       }
                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn003,  true);
                                                         jjtc003 = false;
                                                       }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc003) {
                                                           jjtree.closeNodeScope(jjtn003,  true);
                                                         }
                                                       }
/*@egen*/)
                |  (
    <OpenApos>/*@bgen(jjtree) #OpenApos( true) */
              {
                SimpleNode jjtn004 = new SimpleNode(this, JJTOPENAPOS);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn004,  true);
                jjtc004 = false;
              }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc004) {
                  jjtree.closeNodeScope(jjtn004,  true);
                }
              }
/*@egen*/ ((<EscapeApos>/*@bgen(jjtree) #EscapeApos( true) */
                                                                            {
                                                                              SimpleNode jjtn005 = new SimpleNode(this, JJTESCAPEAPOS);
                                                                              boolean jjtc005 = true;
                                                                              jjtree.openNodeScope(jjtn005);
                                                                            }
                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                            {
                                                                              jjtree.closeNodeScope(jjtn005,  true);
                                                                              jjtc005 = false;
                                                                            }
/*@egen*/{processToken(jjtn005, token);}/*@bgen(jjtree)*/
                                                                            } finally {
                                                                              if (jjtc005) {
                                                                                jjtree.closeNodeScope(jjtn005,  true);
                                                                              }
                                                                            }
/*@egen*/
                | AposAttrValueContent()))* <CloseApos>/*@bgen(jjtree) #CloseApos( true) */
                                                       {
                                                         SimpleNode jjtn006 = new SimpleNode(this, JJTCLOSEAPOS);
                                                         boolean jjtc006 = true;
                                                         jjtree.openNodeScope(jjtn006);
                                                       }
                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn006,  true);
                                                         jjtc006 = false;
                                                       }
/*@egen*/{processToken(jjtn006, token);}/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc006) {
                                                           jjtree.closeNodeScope(jjtn006,  true);
                                                         }
                                                       }
/*@egen*/))/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void QuotAttrValueContent()  :
        {/*@bgen(jjtree) QuotAttrValueContent */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQUOTATTRVALUECONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) QuotAttrValueContent */
            try {
/*@egen*/
            (<QuotAttrContentChar>/*@bgen(jjtree) #QuotAttrContentChar( true) */
                                  {
                                    SimpleNode jjtn001 = new SimpleNode(this, JJTQUOTATTRCONTENTCHAR);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001,  true);
                                    jjtc001 = false;
                                  }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  true);
                                    }
                                  }
/*@egen*/
                | CommonContent())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AposAttrValueContent()  :
        {/*@bgen(jjtree) AposAttrValueContent */
  SimpleNode jjtn000 = new SimpleNode(this, JJTAPOSATTRVALUECONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AposAttrValueContent */
            try {
/*@egen*/
            (<AposAttrContentChar>/*@bgen(jjtree) #AposAttrContentChar( true) */
                                  {
                                    SimpleNode jjtn001 = new SimpleNode(this, JJTAPOSATTRCONTENTCHAR);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001,  true);
                                    jjtc001 = false;
                                  }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  true);
                                    }
                                  }
/*@egen*/
                | CommonContent())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DirElemContent()  :
        {/*@bgen(jjtree) DirElemContent */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDIRELEMCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DirElemContent */
            try {
/*@egen*/
            (DirectConstructor()
                | CDataSection()
                | CommonContent()
                | <ElementContentChar>/*@bgen(jjtree) #ElementContentChar( true) */
                                      {
                                        SimpleNode jjtn001 = new SimpleNode(this, JJTELEMENTCONTENTCHAR);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn001,  true);
                                        jjtc001 = false;
                                      }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  true);
                                        }
                                      }
/*@egen*/)/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CommonContent()  :
        {/*@bgen(jjtree) CommonContent */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMMONCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CommonContent */
            try {
/*@egen*/
            (<PredefinedEntityRef>/*@bgen(jjtree) #PredefinedEntityRef( true) */
                                  {
                                    SimpleNode jjtn001 = new SimpleNode(this, JJTPREDEFINEDENTITYREF);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001,  true);
                                    jjtc001 = false;
                                  }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  true);
                                    }
                                  }
/*@egen*/
                | <CharRef>/*@bgen(jjtree) #CharRef( true) */
                           {
                             SimpleNode jjtn002 = new SimpleNode(this, JJTCHARREF);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn002,  true);
                             jjtc002 = false;
                           }
/*@egen*/{checkCharRef(token.image);processToken(jjtn002, token);}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002,  true);
                             }
                           }
/*@egen*/
                | <LCurlyBraceEscape>/*@bgen(jjtree) #LCurlyBraceEscape( true) */
                                     {
                                       SimpleNode jjtn003 = new SimpleNode(this, JJTLCURLYBRACEESCAPE);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn003,  true);
                                       jjtc003 = false;
                                     }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  true);
                                       }
                                     }
/*@egen*/
                | <RCurlyBraceEscape>/*@bgen(jjtree) #RCurlyBraceEscape( true) */
                                     {
                                       SimpleNode jjtn004 = new SimpleNode(this, JJTRCURLYBRACEESCAPE);
                                       boolean jjtc004 = true;
                                       jjtree.openNodeScope(jjtn004);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn004,  true);
                                       jjtc004 = false;
                                     }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc004) {
                                         jjtree.closeNodeScope(jjtn004,  true);
                                       }
                                     }
/*@egen*/
                | EnclosedExpr())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DirCommentConstructor()  :
        {/*@bgen(jjtree) DirCommentConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDIRCOMMENTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DirCommentConstructor */
            try {
/*@egen*/
            <DirCommentStart>/*@bgen(jjtree) #DirCommentStart( true) */
                             {
                               SimpleNode jjtn001 = new SimpleNode(this, JJTDIRCOMMENTSTART);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn001,  true);
                               jjtc001 = false;
                             }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  true);
                               }
                             }
/*@egen*/ DirCommentContents() <DirCommentEnd>/*@bgen(jjtree) #DirCommentEnd( true) */
                                                                                                                        {
                                                                                                                          SimpleNode jjtn002 = new SimpleNode(this, JJTDIRCOMMENTEND);
                                                                                                                          boolean jjtc002 = true;
                                                                                                                          jjtree.openNodeScope(jjtn002);
                                                                                                                        }
                                                                                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                        {
                                                                                                                          jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                          jjtc002 = false;
                                                                                                                        }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                                                        } finally {
                                                                                                                          if (jjtc002) {
                                                                                                                            jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                          }
                                                                                                                        }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DirCommentContents()  :
        {/*@bgen(jjtree) DirCommentContents */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDIRCOMMENTCONTENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DirCommentContents */
            try {
/*@egen*/
            ((<DirCommentContentChar>/*@bgen(jjtree) #DirCommentContentChar( true) */
                                     {
                                       SimpleNode jjtn001 = new SimpleNode(this, JJTDIRCOMMENTCONTENTCHAR);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  true);
                                       jjtc001 = false;
                                     }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  true);
                                       }
                                     }
/*@egen*/
                | <DirCommentContentDashChar>/*@bgen(jjtree) #DirCommentContentDashChar( true) */
                                             {
                                               SimpleNode jjtn002 = new SimpleNode(this, JJTDIRCOMMENTCONTENTDASHCHAR);
                                               boolean jjtc002 = true;
                                               jjtree.openNodeScope(jjtn002);
                                             }
                                             try {
/*@egen*//*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn002,  true);
                                               jjtc002 = false;
                                             }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc002) {
                                                 jjtree.closeNodeScope(jjtn002,  true);
                                               }
                                             }
/*@egen*/))*/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DirPIConstructor()  :
        {/*@bgen(jjtree) DirPIConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDIRPICONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DirPIConstructor */
            try {
/*@egen*/
            <ProcessingInstructionStart>/*@bgen(jjtree) #ProcessingInstructionStart( true) */
                                        {
                                          SimpleNode jjtn001 = new SimpleNode(this, JJTPROCESSINGINSTRUCTIONSTART);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn001,  true);
                                          jjtc001 = false;
                                        }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  true);
                                          }
                                        }
/*@egen*/ <PITarget>/*@bgen(jjtree) #PITarget( true) */
                                                                                                                    {
                                                                                                                      SimpleNode jjtn002 = new SimpleNode(this, JJTPITARGET);
                                                                                                                      boolean jjtc002 = true;
                                                                                                                      jjtree.openNodeScope(jjtn002);
                                                                                                                    }
                                                                                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                    {
                                                                                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                      jjtc002 = false;
                                                                                                                    }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                                                    } finally {
                                                                                                                      if (jjtc002) {
                                                                                                                        jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                      }
                                                                                                                    }
/*@egen*/ [<S>/*@bgen(jjtree) #S( true) */
                                                                                                                                                                        {
                                                                                                                                                                          SimpleNode jjtn003 = new SimpleNode(this, JJTS);
                                                                                                                                                                          boolean jjtc003 = true;
                                                                                                                                                                          jjtree.openNodeScope(jjtn003);
                                                                                                                                                                        }
                                                                                                                                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                        {
                                                                                                                                                                          jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                          jjtc003 = false;
                                                                                                                                                                        }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                                                                                                                                        } finally {
                                                                                                                                                                          if (jjtc003) {
                                                                                                                                                                            jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                          }
                                                                                                                                                                        }
/*@egen*/ DirPIContents()] <ProcessingInstructionEnd>/*@bgen(jjtree) #ProcessingInstructionEnd( true) */
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              SimpleNode jjtn004 = new SimpleNode(this, JJTPROCESSINGINSTRUCTIONEND);
                                                                                                                                                                                                                                                              boolean jjtc004 = true;
                                                                                                                                                                                                                                                              jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                                              jjtc004 = false;
                                                                                                                                                                                                                                                            }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                            } finally {
                                                                                                                                                                                                                                                              if (jjtc004) {
                                                                                                                                                                                                                                                                jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DirPIContents()  :
        {/*@bgen(jjtree) DirPIContents */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDIRPICONTENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DirPIContents */
            try {
/*@egen*/
            (<Char>/*@bgen(jjtree) #Char( true) */
                   {
                     SimpleNode jjtn001 = new SimpleNode(this, JJTCHAR);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                   }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
                   }
/*@egen*/)*/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CDataSection()  :
        {/*@bgen(jjtree) CDataSection */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCDATASECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CDataSection */
            try {
/*@egen*/
            <CdataSectionStart>/*@bgen(jjtree) #CdataSectionStart( true) */
                               {
                                 SimpleNode jjtn001 = new SimpleNode(this, JJTCDATASECTIONSTART);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001,  true);
                                 jjtc001 = false;
                               }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                 }
                               }
/*@egen*/ CDataSectionContents() <CdataSectionEnd>/*@bgen(jjtree) #CdataSectionEnd( true) */
                                                                                                                                {
                                                                                                                                  SimpleNode jjtn002 = new SimpleNode(this, JJTCDATASECTIONEND);
                                                                                                                                  boolean jjtc002 = true;
                                                                                                                                  jjtree.openNodeScope(jjtn002);
                                                                                                                                }
                                                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                {
                                                                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                                  jjtc002 = false;
                                                                                                                                }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                                                                } finally {
                                                                                                                                  if (jjtc002) {
                                                                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                                  }
                                                                                                                                }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CDataSectionContents()  :
        {/*@bgen(jjtree) CDataSectionContents */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCDATASECTIONCONTENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CDataSectionContents */
            try {
/*@egen*/
            (<Char>/*@bgen(jjtree) #Char( true) */
                   {
                     SimpleNode jjtn001 = new SimpleNode(this, JJTCHAR);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                   }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
                   }
/*@egen*/)*/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ComputedConstructor()  :
        {/*@bgen(jjtree) ComputedConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPUTEDCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ComputedConstructor */
            try {
/*@egen*/
            (CompDocConstructor()
                | CompElemConstructor()
                | CompAttrConstructor()
                | CompNamespaceConstructor()
                | CompTextConstructor()
                | CompCommentConstructor()
                | CompPIConstructor())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CompDocConstructor()  :
        {/*@bgen(jjtree) CompDocConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPDOCCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CompDocConstructor */
            try {
/*@egen*/
            "document" <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                               {
                                 SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001,  true);
                                 jjtc001 = false;
                               }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                 }
                               }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                            {
                                                                                              SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                              boolean jjtc002 = true;
                                                                                              jjtree.openNodeScope(jjtn002);
                                                                                            }
                                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                                            {
                                                                                              jjtree.closeNodeScope(jjtn002,  true);
                                                                                              jjtc002 = false;
                                                                                            }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                            } finally {
                                                                                              if (jjtc002) {
                                                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                                              }
                                                                                            }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CompElemConstructor()  :
        {/*@bgen(jjtree) CompElemConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPELEMCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CompElemConstructor */
            try {
/*@egen*/
            "element" (EQName()
                |  (
    <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
            {
              SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
            }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
            }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                         {
                                                                           SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
                                                                         }
                                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                                         {
                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                           jjtc002 = false;
                                                                         }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                         } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                           }
                                                                         }
/*@egen*/)) <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                                                                                                                                 {
                                                                                                                                   SimpleNode jjtn003 = new SimpleNode(this, JJTLBRACE);
                                                                                                                                   boolean jjtc003 = true;
                                                                                                                                   jjtree.openNodeScope(jjtn003);
                                                                                                                                 }
                                                                                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                 {
                                                                                                                                   jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   jjtc003 = false;
                                                                                                                                 }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                                                                                                 } finally {
                                                                                                                                   if (jjtc003) {
                                                                                                                                     jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   }
                                                                                                                                 }
/*@egen*/ [ContentExpr()] <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                                                                                                                                       {
                                                                                                                                                                                                         SimpleNode jjtn004 = new SimpleNode(this, JJTRBRACE);
                                                                                                                                                                                                         boolean jjtc004 = true;
                                                                                                                                                                                                         jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                       }
                                                                                                                                                                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                       {
                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                         jjtc004 = false;
                                                                                                                                                                                                       }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                       } finally {
                                                                                                                                                                                                         if (jjtc004) {
                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                         }
                                                                                                                                                                                                       }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ContentExpr()  :
        {/*@bgen(jjtree) ContentExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONTENTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ContentExpr */
            try {
/*@egen*/
            Expr()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CompAttrConstructor()  :
        {/*@bgen(jjtree) CompAttrConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPATTRCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CompAttrConstructor */
            try {
/*@egen*/
            "attribute" (EQName()
                |  (
    <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
            {
              SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
            }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
            }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                         {
                                                                           SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
                                                                         }
                                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                                         {
                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                           jjtc002 = false;
                                                                         }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                         } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                           }
                                                                         }
/*@egen*/)) <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                                                                                                                                 {
                                                                                                                                   SimpleNode jjtn003 = new SimpleNode(this, JJTLBRACE);
                                                                                                                                   boolean jjtc003 = true;
                                                                                                                                   jjtree.openNodeScope(jjtn003);
                                                                                                                                 }
                                                                                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                 {
                                                                                                                                   jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   jjtc003 = false;
                                                                                                                                 }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                                                                                                 } finally {
                                                                                                                                   if (jjtc003) {
                                                                                                                                     jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   }
                                                                                                                                 }
/*@egen*/ [Expr()] <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                                                                                                                                {
                                                                                                                                                                                                  SimpleNode jjtn004 = new SimpleNode(this, JJTRBRACE);
                                                                                                                                                                                                  boolean jjtc004 = true;
                                                                                                                                                                                                  jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                }
                                                                                                                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                {
                                                                                                                                                                                                  jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                  jjtc004 = false;
                                                                                                                                                                                                }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                } finally {
                                                                                                                                                                                                  if (jjtc004) {
                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CompNamespaceConstructor()  :
        {/*@bgen(jjtree) CompNamespaceConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPNAMESPACECONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CompNamespaceConstructor */
            try {
/*@egen*/
            "namespace" (Prefix()
                |  (
    <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
            {
              SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
            }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
            }
/*@egen*/ PrefixExpr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                               {
                                                                                 SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                 boolean jjtc002 = true;
                                                                                 jjtree.openNodeScope(jjtn002);
                                                                               }
                                                                               try {
/*@egen*//*@bgen(jjtree)*/
                                                                               {
                                                                                 jjtree.closeNodeScope(jjtn002,  true);
                                                                                 jjtc002 = false;
                                                                               }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                               } finally {
                                                                                 if (jjtc002) {
                                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                                 }
                                                                               }
/*@egen*/)) <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                                                                                                                                       {
                                                                                                                                         SimpleNode jjtn003 = new SimpleNode(this, JJTLBRACE);
                                                                                                                                         boolean jjtc003 = true;
                                                                                                                                         jjtree.openNodeScope(jjtn003);
                                                                                                                                       }
                                                                                                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                       {
                                                                                                                                         jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                         jjtc003 = false;
                                                                                                                                       }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                                                                                                       } finally {
                                                                                                                                         if (jjtc003) {
                                                                                                                                           jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                         }
                                                                                                                                       }
/*@egen*/ URIExpr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                                                                                                                                       {
                                                                                                                                                                                                         SimpleNode jjtn004 = new SimpleNode(this, JJTRBRACE);
                                                                                                                                                                                                         boolean jjtc004 = true;
                                                                                                                                                                                                         jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                       }
                                                                                                                                                                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                       {
                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                         jjtc004 = false;
                                                                                                                                                                                                       }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                       } finally {
                                                                                                                                                                                                         if (jjtc004) {
                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                         }
                                                                                                                                                                                                       }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void Prefix()  :
        {/*@bgen(jjtree) Prefix */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) Prefix */
            try {
/*@egen*/
            NCName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void PrefixExpr()  :
        {/*@bgen(jjtree) PrefixExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREFIXEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) PrefixExpr */
            try {
/*@egen*/
            Expr()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void URIExpr()  :
        {/*@bgen(jjtree) URIExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTURIEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) URIExpr */
            try {
/*@egen*/
            Expr()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CompTextConstructor()  :
        {/*@bgen(jjtree) CompTextConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPTEXTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CompTextConstructor */
            try {
/*@egen*/
            "text" <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                           {
                             SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001,  true);
                             jjtc001 = false;
                           }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  true);
                             }
                           }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                        {
                                                                                          SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                          boolean jjtc002 = true;
                                                                                          jjtree.openNodeScope(jjtn002);
                                                                                        }
                                                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                                                        {
                                                                                          jjtree.closeNodeScope(jjtn002,  true);
                                                                                          jjtc002 = false;
                                                                                        }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                        } finally {
                                                                                          if (jjtc002) {
                                                                                            jjtree.closeNodeScope(jjtn002,  true);
                                                                                          }
                                                                                        }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CompCommentConstructor()  :
        {/*@bgen(jjtree) CompCommentConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPCOMMENTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CompCommentConstructor */
            try {
/*@egen*/
            "comment" <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                              {
                                SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001,  true);
                                jjtc001 = false;
                              }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                }
                              }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                           {
                                                                                             SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                             boolean jjtc002 = true;
                                                                                             jjtree.openNodeScope(jjtn002);
                                                                                           }
                                                                                           try {
/*@egen*//*@bgen(jjtree)*/
                                                                                           {
                                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                                             jjtc002 = false;
                                                                                           }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                                           } finally {
                                                                                             if (jjtc002) {
                                                                                               jjtree.closeNodeScope(jjtn002,  true);
                                                                                             }
                                                                                           }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CompPIConstructor()  :
        {/*@bgen(jjtree) CompPIConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPPICONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CompPIConstructor */
            try {
/*@egen*/
            "processing-instruction" (NCName()
                |  (
    <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
            {
              SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
            }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
            }
/*@egen*/ Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                         {
                                                                           SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
                                                                         }
                                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                                         {
                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                           jjtc002 = false;
                                                                         }
/*@egen*/{processToken(jjtn002, token);}/*@bgen(jjtree)*/
                                                                         } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                           }
                                                                         }
/*@egen*/)) <Lbrace>/*@bgen(jjtree) #Lbrace( true) */
                                                                                                                                 {
                                                                                                                                   SimpleNode jjtn003 = new SimpleNode(this, JJTLBRACE);
                                                                                                                                   boolean jjtc003 = true;
                                                                                                                                   jjtree.openNodeScope(jjtn003);
                                                                                                                                 }
                                                                                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                 {
                                                                                                                                   jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   jjtc003 = false;
                                                                                                                                 }
/*@egen*/{processToken(jjtn003, token);}/*@bgen(jjtree)*/
                                                                                                                                 } finally {
                                                                                                                                   if (jjtc003) {
                                                                                                                                     jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   }
                                                                                                                                 }
/*@egen*/ [Expr()] <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                                                                                                                                {
                                                                                                                                                                                                  SimpleNode jjtn004 = new SimpleNode(this, JJTRBRACE);
                                                                                                                                                                                                  boolean jjtc004 = true;
                                                                                                                                                                                                  jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                }
                                                                                                                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                {
                                                                                                                                                                                                  jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                  jjtc004 = false;
                                                                                                                                                                                                }
/*@egen*/{processToken(jjtn004, token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                } finally {
                                                                                                                                                                                                  if (jjtc004) {
                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void FunctionItemExpr()  :
        {/*@bgen(jjtree) FunctionItemExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONITEMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) FunctionItemExpr */
            try {
/*@egen*/
            (LOOKAHEAD(2) NamedFunctionRef()
                | LOOKAHEAD(2) InlineFunctionExpr())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void NamedFunctionRef()  :
        {/*@bgen(jjtree) NamedFunctionRef */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAMEDFUNCTIONREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) NamedFunctionRef */
            try {
/*@egen*/
            FunctionEQName() "#" <IntegerLiteral>/*@bgen(jjtree) #IntegerLiteral( true) */
                                                 {
                                                   SimpleNode jjtn001 = new SimpleNode(this, JJTINTEGERLITERAL);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
                                                 }
                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn001,  true);
                                                   jjtc001 = false;
                                                 }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001,  true);
                                                   }
                                                 }
/*@egen*//*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void InlineFunctionExpr()  :
        {/*@bgen(jjtree) InlineFunctionExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINLINEFUNCTIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) InlineFunctionExpr */
            try {
/*@egen*/
            (Annotation())* "function" "(" [ParamList()] ")" ["as" SequenceType()] FunctionBody()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SingleType()  :
        {/*@bgen(jjtree) SingleType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSINGLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SingleType */
            try {
/*@egen*/
            SimpleTypeName() ["?"{jjtn000.processValue("?");}]/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void TypeDeclaration()  :
        {/*@bgen(jjtree) TypeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) TypeDeclaration */
            try {
/*@egen*/
            "as" SequenceType()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SequenceType()  :
        {/*@bgen(jjtree) SequenceType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SequenceType */
            try {
/*@egen*/
            (LOOKAHEAD(2)  (
    "empty-sequence"{jjtn000.processValue("empty-sequence");} "(" ")")
                |  (
    ItemType() [LOOKAHEAD(1) OccurrenceIndicator()]))/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void OccurrenceIndicator()  :
        {/*@bgen(jjtree) OccurrenceIndicator */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOCCURRENCEINDICATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) OccurrenceIndicator */
            try {
/*@egen*/
            ("?"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.processValue("?");}
                | "*"/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.processValue("*");}
                | <Plus>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{processToken(((SimpleNode)jjtree.peekNode()), token);})/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ItemType()  :
        {/*@bgen(jjtree) ItemType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTITEMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ItemType */
            try {
/*@egen*/
            (LOOKAHEAD(2) KindTest()
                | LOOKAHEAD(2)  (
    "item"{jjtn000.processValue("item");} "(" ")")
                | LOOKAHEAD(2) FunctionTest()
                | AtomicOrUnionType()
                | ParenthesizedItemType())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AtomicOrUnionType()  :
        {/*@bgen(jjtree) AtomicOrUnionType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATOMICORUNIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AtomicOrUnionType */
            try {
/*@egen*/
            EQName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void KindTest()        :
        {}
        {
            (DocumentTest()
                | ElementTest()
                | AttributeTest()
                | SchemaElementTest()
                | SchemaAttributeTest()
                | PITest()
                | CommentTest()
                | TextTest()
                | NamespaceNodeTest()
                | AnyKindTest())
        }

    void AnyKindTest()  :
        {/*@bgen(jjtree) AnyKindTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANYKINDTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AnyKindTest */
            try {
/*@egen*/
            "node" "(" ")"/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void DocumentTest()  :
        {/*@bgen(jjtree) DocumentTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDOCUMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) DocumentTest */
            try {
/*@egen*/
            "document-node" "(" [(ElementTest()
                | SchemaElementTest())] ")"/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void TextTest()  :
        {/*@bgen(jjtree) TextTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTEXTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) TextTest */
            try {
/*@egen*/
            "text" "(" ")"/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void CommentTest()  :
        {/*@bgen(jjtree) CommentTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) CommentTest */
            try {
/*@egen*/
            "comment" "(" ")"/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void NamespaceNodeTest()  :
        {/*@bgen(jjtree) NamespaceNodeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAMESPACENODETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) NamespaceNodeTest */
            try {
/*@egen*/
            "namespace-node" "(" ")"/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void PITest()  :
        {/*@bgen(jjtree) PITest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPITEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) PITest */
            try {
/*@egen*/
            "processing-instruction" "(" [(NCName()
                | <StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                                 {
                                   SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                   jjtc001 = false;
                                 }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                   }
                                 }
/*@egen*/)] ")"/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AttributeTest()  :
        {/*@bgen(jjtree) AttributeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AttributeTest */
            try {
/*@egen*/
            "attribute" "(" [AttribNameOrWildcard() ["," TypeName()]] ")"/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AttribNameOrWildcard()  :
        {/*@bgen(jjtree) AttribNameOrWildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AttribNameOrWildcard */
            try {
/*@egen*/
            (AttributeName()
                | "*"/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.processValue("*");})/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SchemaAttributeTest()  :
        {/*@bgen(jjtree) SchemaAttributeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SchemaAttributeTest */
            try {
/*@egen*/
            "schema-attribute" "(" AttributeDeclaration() ")"/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AttributeDeclaration()  :
        {/*@bgen(jjtree) AttributeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AttributeDeclaration */
            try {
/*@egen*/
            AttributeName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ElementTest()  :
        {/*@bgen(jjtree) ElementTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ElementTest */
            try {
/*@egen*/
            "element" "(" [ElementNameOrWildcard() ["," TypeName() ["?"{jjtn000.processValue("?");}]]] ")"/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ElementNameOrWildcard()  :
        {/*@bgen(jjtree) ElementNameOrWildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ElementNameOrWildcard */
            try {
/*@egen*/
            (ElementName()
                | "*"/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.processValue("*");})/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SchemaElementTest()  :
        {/*@bgen(jjtree) SchemaElementTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SchemaElementTest */
            try {
/*@egen*/
            "schema-element" "(" ElementDeclaration() ")"/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ElementDeclaration()  :
        {/*@bgen(jjtree) ElementDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ElementDeclaration */
            try {
/*@egen*/
            ElementName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AttributeName()  :
        {/*@bgen(jjtree) AttributeName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AttributeName */
            try {
/*@egen*/
            EQName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ElementName()  :
        {/*@bgen(jjtree) ElementName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ElementName */
            try {
/*@egen*/
            EQName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void SimpleTypeName()  :
        {/*@bgen(jjtree) SimpleTypeName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSIMPLETYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) SimpleTypeName */
            try {
/*@egen*/
            TypeName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void TypeName()  :
        {/*@bgen(jjtree) TypeName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) TypeName */
            try {
/*@egen*/
            EQName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void FunctionTest()  :
        {/*@bgen(jjtree) FunctionTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) FunctionTest */
            try {
/*@egen*/
            (Annotation())* (LOOKAHEAD(4) AnyFunctionTest()
                | LOOKAHEAD(4) TypedFunctionTest())/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void AnyFunctionTest()  :
        {/*@bgen(jjtree) AnyFunctionTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANYFUNCTIONTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) AnyFunctionTest */
            try {
/*@egen*/
            "function" "(" "*" ")"/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void TypedFunctionTest()  :
        {/*@bgen(jjtree) TypedFunctionTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPEDFUNCTIONTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) TypedFunctionTest */
            try {
/*@egen*/
            "function" "(" [SequenceType() ("," SequenceType())*] ")" "as" SequenceType()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void ParenthesizedItemType()  :
        {/*@bgen(jjtree) ParenthesizedItemType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARENTHESIZEDITEMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) ParenthesizedItemType */
            try {
/*@egen*/
            "(" ItemType() ")"/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void URILiteral()  :
        {/*@bgen(jjtree) URILiteral */
  SimpleNode jjtn000 = new SimpleNode(this, JJTURILITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) URILiteral */
            try {
/*@egen*/
            <StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                           {
                             SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001,  true);
                             jjtc001 = false;
                           }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  true);
                             }
                           }
/*@egen*//*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void EQName()        :
        {}
        {
            (QName()
                | <URIQualifiedName>/*@bgen(jjtree) #URIQualifiedName( true) */
                                    {
                                      SimpleNode jjtn001 = new SimpleNode(this, JJTURIQUALIFIEDNAME);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn001,  true);
                                      jjtc001 = false;
                                    }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  true);
                                      }
                                    }
/*@egen*/)
        }

    void FunctionEQName()        :
        {}
        {
            (FunctionQName()
                | <URIQualifiedName>/*@bgen(jjtree) #URIQualifiedName( true) */
                                    {
                                      SimpleNode jjtn001 = new SimpleNode(this, JJTURIQUALIFIEDNAME);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn001,  true);
                                      jjtc001 = false;
                                    }
/*@egen*/{processToken(jjtn001, token);}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  true);
                                      }
                                    }
/*@egen*/)
        }

    void NCName()  :
        {/*@bgen(jjtree) NCName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNCNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) NCName */
            try {
/*@egen*/
            QName()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void QName()  :
        {/*@bgen(jjtree) QName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) QName */
            try {
/*@egen*/
            (FunctionQName()
                | "attribute"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("attribute");}
                | "comment"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("comment");}
                | "document-node"/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/{jjtn000.processValue("document-node");}
                | "element"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("element");}
                | "empty-sequence"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/{jjtn000.processValue("empty-sequence");}
                | "function"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("function");}
                | "if"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("if");}
                | "item"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("item");}
                | "namespace-node"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/{jjtn000.processValue("namespace-node");}
                | "node"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("node");}
                | "processing-instruction"/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/{jjtn000.processValue("processing-instruction");}
                | "schema-attribute"/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/{jjtn000.processValue("schema-attribute");}
                | "schema-element"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/{jjtn000.processValue("schema-element");}
                | "switch"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("switch");}
                | "text"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("text");}
                | "typeswitch"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.processValue("typeswitch");})/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    void FunctionQName()  :
        {/*@bgen(jjtree) FunctionQName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
        {/*@bgen(jjtree) FunctionQName */
            try {
/*@egen*/
            (<QNameToken>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{processToken(((SimpleNode)jjtree.peekNode()), token);}
                | <Ascending>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{processToken(((SimpleNode)jjtree.peekNode()), token);}
                | <Descending>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{processToken(((SimpleNode)jjtree.peekNode()), token);}
                | <External>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{processToken(((SimpleNode)jjtree.peekNode()), token);}
                | <Greatest>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{processToken(((SimpleNode)jjtree.peekNode()), token);}
                | <Least>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{processToken(((SimpleNode)jjtree.peekNode()), token);}
                | "NaN"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("NaN");}
                | "allowing"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("allowing");}
                | "ancestor"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("ancestor");}
                | "ancestor-or-self"/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/{jjtn000.processValue("ancestor-or-self");}
                | "and"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("and");}
                | "as"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("as");}
                | "at"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("at");}
                | "base-uri"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("base-uri");}
                | "boundary-space"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/{jjtn000.processValue("boundary-space");}
                | "by"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("by");}
                | "case"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("case");}
                | "cast"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("cast");}
                | "castable"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("castable");}
                | "catch"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("catch");}
                | "child"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("child");}
                | "collation"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("collation");}
                | "construction"/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/{jjtn000.processValue("construction");}
                | "context"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("context");}
                | "copy-namespaces"/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/{jjtn000.processValue("copy-namespaces");}
                | "count"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("count");}
                | "decimal-format"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/{jjtn000.processValue("decimal-format");}
                | "decimal-separator"/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{jjtn000.processValue("decimal-separator");}
                | "declare"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("declare");}
                | "default"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("default");}
                | "descendant"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.processValue("descendant");}
                | "descendant-or-self"/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/{jjtn000.processValue("descendant-or-self");}
                | "digit"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("digit");}
                | "div"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("div");}
                | "document"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("document");}
                | "else"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("else");}
                | "empty"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("empty");}
                | "encoding"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("encoding");}
                | "end"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("end");}
                | "eq"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("eq");}
                | "every"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("every");}
                | "except"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("except");}
                | "following"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("following");}
                | "following-sibling"/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{jjtn000.processValue("following-sibling");}
                | "for"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("for");}
                | "ge"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("ge");}
                | "group"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("group");}
                | "grouping-separator"/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/{jjtn000.processValue("grouping-separator");}
                | "gt"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("gt");}
                | "idiv"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("idiv");}
                | "import"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("import");}
                | "in"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("in");}
                | "infinity"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("infinity");}
                | "inherit"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("inherit");}
                | "instance"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("instance");}
                | "intersect"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("intersect");}
                | "is"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("is");}
                | "lax"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("lax");}
                | "le"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("le");}
                | "let"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("let");}
                | "lt"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("lt");}
                | "minus-sign"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.processValue("minus-sign");}
                | "mod"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("mod");}
                | "module"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("module");}
                | "namespace"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("namespace");}
                | "ne"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("ne");}
                | "next"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("next");}
                | "no-inherit"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.processValue("no-inherit");}
                | "no-preserve"/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/{jjtn000.processValue("no-preserve");}
                | "of"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("of");}
                | "only"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("only");}
                | "option"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("option");}
                | "or"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("or");}
                | "order"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("order");}
                | "ordered"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("ordered");}
                | "ordering"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("ordering");}
                | "parent"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("parent");}
                | "pattern-separator"/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{jjtn000.processValue("pattern-separator");}
                | "per-mille"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("per-mille");}
                | "percent"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("percent");}
                | "preceding"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("preceding");}
                | "preceding-sibling"/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{jjtn000.processValue("preceding-sibling");}
                | "preserve"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("preserve");}
                | "previous"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("previous");}
                | "return"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("return");}
                | "satisfies"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("satisfies");}
                | "schema"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("schema");}
                | "self"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("self");}
                | "sliding"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("sliding");}
                | "some"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("some");}
                | "stable"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("stable");}
                | "start"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("start");}
                | "strict"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("strict");}
                | "strip"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("strip");}
                | "then"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("then");}
                | "to"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.processValue("to");}
                | "treat"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("treat");}
                | "try"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.processValue("try");}
                | "tumbling"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("tumbling");}
                | "type"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("type");}
                | "union"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("union");}
                | "unordered"/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.processValue("unordered");}
                | "validate"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("validate");}
                | "variable"/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.processValue("variable");}
                | "version"/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{jjtn000.processValue("version");}
                | "when"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.processValue("when");}
                | "where"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.processValue("where");}
                | "window"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("window");}
                | "xquery"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{jjtn000.processValue("xquery");}
                | "zero-digit"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.processValue("zero-digit");})/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
        }

    
<XML_COMMENT>
TOKEN :
{
 < DirCommentContentDoubleDashError : "-" "-" >
}

<QUOT_ATTRIBUTE_CONTENT, APOS_ATTRIBUTE_CONTENT, ELEMENT_CONTENT>
TOKEN :
{
 < RbraceError : "}" > { pushState(); } : DEFAULT
}

<QUOT_ATTRIBUTE_CONTENT, APOS_ATTRIBUTE_CONTENT>
TOKEN :
{
 < LeftAngleBracketError : "<" > { pushState(); } : DEFAULT
}

<QUOT_ATTRIBUTE_CONTENT, APOS_ATTRIBUTE_CONTENT, ELEMENT_CONTENT>
TOKEN :
{
 < AmpersandError : "&" >
}

<PROCESSING_INSTRUCTION>
TOKEN :
{
 < PITargetError : ("XML"
                | "XMl"
                | "XmL"
                | "Xml"
                | "xML"
                | "xMl"
                | "xmL"
                | "xml") >
}

<DEFAULT>
TOKEN :
{
 < NumericLiteralError : ( (
    "." <Digits>)
                |  (
    <Digits> ("." (["0" - "9"])*)?)) (["e", "E"] (["+", "-"])? <Digits>)? ["a" - "z", "A" - "Z"] >
}

<DEFAULT>
TOKEN :
{
 < Slash : "/" >
}

<DEFAULT>
TOKEN :
{
 < SlashSlash : "//" >
}

<DEFAULT>
TOKEN :
{
 < Greatest : "greatest" >
}

<DEFAULT>
TOKEN :
{
 < Least : "least" >
}

<DEFAULT>
TOKEN :
{
 < External : "external" >
}

<DEFAULT, QUOT_ATTRIBUTE_CONTENT, APOS_ATTRIBUTE_CONTENT, ELEMENT_CONTENT>
TOKEN :
{
 < Lbrace : "{" > { pushState(); } : DEFAULT
}

<DEFAULT>
TOKEN :
{
 < Rbrace : "}" > { popState(); }
}

<DEFAULT>
TOKEN :
{
 < Ascending : "ascending" >
}

<DEFAULT>
TOKEN :
{
 < Descending : "descending" >
}

<DEFAULT, ELEMENT_CONTENT>
TOKEN :
{
 < LeftAngleBracket : "<" > { pushState(); } : START_TAG
}

<DEFAULT>
TOKEN :
{
 < Plus : "+" >
}

<DEFAULT>
TOKEN :
{
 < Minus : "-" >
}

<DEFAULT>
TOKEN :
{
 < PragmaOpen : "(#" > : PRAGMA_1
}

<PRAGMA_2, PRAGMA_3>
TOKEN :
{
 < PragmaClose : "#)" > : DEFAULT
}

<DEFAULT>
TOKEN :
{
 < URIQualifiedStar : <BracedURILiteral> "*" >
}

<DEFAULT>
TOKEN :
{
 < NCNameColonStar : <NCNameTok> ":" "*" >
}

<DEFAULT>
TOKEN :
{
 < StarColonNCName : "*" ":" <NCNameTok> >
}

<START_TAG>
TOKEN :
{
 < TagQName : <QNameToken> >
}

<START_TAG>
TOKEN :
{
 < StartTagClose : ">" > : ELEMENT_CONTENT
}

<START_TAG>
TOKEN :
{
 < EmptyTagClose : "/>" > { popState(); }
}

<ELEMENT_CONTENT>
TOKEN :
{
 < EndTagOpen : "</" > : END_TAG
}

<END_TAG>
TOKEN :
{
 < EndTagQName : <QNameToken> >
}

<END_TAG>
TOKEN :
{
 < EndTagClose : ">" > { popState(); }
}

<START_TAG>
TOKEN :
{
 < ValueIndicator : "=" >
}

<START_TAG>
TOKEN :
{
 < OpenQuot : "\"" > : QUOT_ATTRIBUTE_CONTENT
}

<QUOT_ATTRIBUTE_CONTENT>
TOKEN :
{
 < CloseQuot : "\"" > : START_TAG
}

<START_TAG>
TOKEN :
{
 < OpenApos : "'" > : APOS_ATTRIBUTE_CONTENT
}

<APOS_ATTRIBUTE_CONTENT>
TOKEN :
{
 < CloseApos : "'" > : START_TAG
}

<QUOT_ATTRIBUTE_CONTENT, APOS_ATTRIBUTE_CONTENT, ELEMENT_CONTENT>
TOKEN :
{
 < LCurlyBraceEscape : "{{" >
}

<QUOT_ATTRIBUTE_CONTENT, APOS_ATTRIBUTE_CONTENT, ELEMENT_CONTENT>
TOKEN :
{
 < RCurlyBraceEscape : "}}" >
}

<DEFAULT, ELEMENT_CONTENT>
TOKEN :
{
 < DirCommentStart : "<!--" > { pushState(); } : XML_COMMENT
}

<XML_COMMENT>
TOKEN :
{
 < DirCommentEnd : "-->" > { popState(); }
}

<XML_COMMENT>
TOKEN :
{
 < DirCommentContentChar : <Char> >
}

<XML_COMMENT>
TOKEN :
{
 < DirCommentContentDashChar : "-" <Char> >
}

<DEFAULT, ELEMENT_CONTENT>
TOKEN :
{
 < ProcessingInstructionStart : "<?" > { pushState(); } : PROCESSING_INSTRUCTION
}

<PROCESSING_INSTRUCTION, PROCESSING_INSTRUCTION_CONTENT>
TOKEN :
{
 < ProcessingInstructionEnd : "?>" > { popState(); }
}

<DEFAULT, ELEMENT_CONTENT>
TOKEN :
{
 < CdataSectionStart : "<![CDATA[" > { pushState(); } : CDATA_SECTION
}

<CDATA_SECTION>
TOKEN :
{
 < CdataSectionEnd : ("]" "]" ">") > { popState(); }
}

<DEFAULT>
TOKEN :
{
 < IntegerLiteral : <Digits> >
}

<DEFAULT>
TOKEN :
{
 < DecimalLiteral : ( (
    "." <Digits>)
                |  (
    <Digits> "." (["0" - "9"])*)) >
}

<DEFAULT>
TOKEN :
{
 < DoubleLiteral : ( (
    "." <Digits>)
                |  (
    <Digits> ("." (["0" - "9"])*)?)) ["e", "E"] (["+", "-"])? <Digits> >
}

<DEFAULT>
TOKEN :
{
 < StringLiteral : ( (
    "\"" ((<PredefinedEntityRef>
                | <CharRef>
                | <EscapeQuot>
                | ~["\"", "&"]))* "\"")
                |  (
    "'" ((<PredefinedEntityRef>
                | <CharRef>
                | <EscapeApos>
                | ~["'", "&"]))* "'")) >
}

<DEFAULT, PRAGMA_1>
TOKEN :
{
 < URIQualifiedName : <BracedURILiteral> <NCNameTok> > {
    if ( curLexState == DEFAULT ) { } else
    if ( curLexState == PRAGMA_1 ) { SwitchTo(PRAGMA_2); } else
    { assert false; }
  } 
}

TOKEN :
{
 < #BracedURILiteral : "Q" "{" ((<PredefinedEntityRef>
                | <CharRef>
                | ~["&", "{", "}"]))* "}" >
}

<QUOT_ATTRIBUTE_CONTENT, APOS_ATTRIBUTE_CONTENT, ELEMENT_CONTENT>
TOKEN :
{
 < PredefinedEntityRef : "&" ("lt"
                | "gt"
                | "amp"
                | "quot"
                | "apos") ";" >
}

<QUOT_ATTRIBUTE_CONTENT>
TOKEN :
{
 < EscapeQuot : "\"\"" >
}

<APOS_ATTRIBUTE_CONTENT>
TOKEN :
{
 < EscapeApos : "''" >
}

<ELEMENT_CONTENT>
TOKEN :
{
 < ElementContentChar : <Char> >
}

<QUOT_ATTRIBUTE_CONTENT>
TOKEN :
{
 < QuotAttrContentChar : <Char> >
}

<APOS_ATTRIBUTE_CONTENT>
TOKEN :
{
 < AposAttrContentChar : <Char> >
}

<PROCESSING_INSTRUCTION>
TOKEN :
{
 < PITarget : <NCNameTok> >
}

<QUOT_ATTRIBUTE_CONTENT, APOS_ATTRIBUTE_CONTENT, ELEMENT_CONTENT>
TOKEN :
{
 < CharRef : "&#" (<Digits>
                |  (
    "x" <HexDigits>)) ";" >
}

<DEFAULT, PRAGMA_1>
TOKEN :
{
 < QNameToken : (<NCNameTok> ":")? <LocalPart> > {
    if ( curLexState == DEFAULT ) { } else
    if ( curLexState == PRAGMA_1 ) { SwitchTo(PRAGMA_2); } else
    { assert false; }
  } 
}

TOKEN :
{
 < #NCNameTok : <Nmstart> (<Nmchar>)* >
}

<START_TAG, END_TAG, PROCESSING_INSTRUCTION, PRAGMA_1, PRAGMA_2>
TOKEN :
{
 < S : (<WhitespaceChar>)+  > {
    if ( curLexState == START_TAG ) { } else
    if ( curLexState == END_TAG ) { } else
    if ( curLexState == PROCESSING_INSTRUCTION ) { SwitchTo(PROCESSING_INSTRUCTION_CONTENT); } else
    if ( curLexState == PRAGMA_1 ) { } else
    if ( curLexState == PRAGMA_2 ) { SwitchTo(PRAGMA_3); } else
    { assert false; }
  } 
}

<PROCESSING_INSTRUCTION_CONTENT, CDATA_SECTION, PRAGMA_3>
TOKEN :
{
 < Char : ["\t", "\r", "\n", " " - "\ufffd"] >
}

TOKEN :
{
 < #Digits : (["0" - "9"])+  >
}

TOKEN :
{
 < #HexDigits : (["0" - "9", "a" - "f", "A" - "F"])+  >
}

TOKEN :
{
 < #WhitespaceChar : ["\t", "\r", "\n", " "] >
}

TOKEN :
{
 < #LocalPart : <NCNameTok> >
}

TOKEN :
{
 < #Nmstart : (<Letter>
                | "_") >
}

TOKEN :
{
 < #Nmchar : (<Letter>
                | <CombiningChar>
                | <Extender>
                | <Digit>
                | "."
                | "-"
                | "_") >
}

TOKEN :
{
 < #Letter : (<BaseChar>
                | <Ideographic>) >
}

TOKEN :
{
 < #BaseChar : ["A" - "Z", "a" - "z", "\u00c0" - "\u00d6", "\u00d8" - "\u00f6", "\u00f8" - "\u00ff", "\u0100" - "\u0131", "\u0134" - "\u013e", "\u0141" - "\u0148", "\u014a" - "\u017e", "\u0180" - "\u01c3", "\u01cd" - "\u01f0", "\u01f4" - "\u01f5", "\u01fa" - "\u0217", "\u0250" - "\u02a8", "\u02bb" - "\u02c1", "\u0386", "\u0388" - "\u038a", "\u038c", "\u038e" - "\u03a1", "\u03a3" - "\u03ce", "\u03d0" - "\u03d6", "\u03da", "\u03dc", "\u03de", "\u03e0", "\u03e2" - "\u03f3", "\u0401" - "\u040c", "\u040e" - "\u044f", "\u0451" - "\u045c", "\u045e" - "\u0481", "\u0490" - "\u04c4", "\u04c7" - "\u04c8", "\u04cb" - "\u04cc", "\u04d0" - "\u04eb", "\u04ee" - "\u04f5", "\u04f8" - "\u04f9", "\u0531" - "\u0556", "\u0559", "\u0561" - "\u0586", "\u05d0" - "\u05ea", "\u05f0" - "\u05f2", "\u0621" - "\u063a", "\u0641" - "\u064a", "\u0671" - "\u06b7", "\u06ba" - "\u06be", "\u06c0" - "\u06ce", "\u06d0" - "\u06d3", "\u06d5", "\u06e5" - "\u06e6", "\u0905" - "\u0939", "\u093d", "\u0958" - "\u0961", "\u0985" - "\u098c", "\u098f" - "\u0990", "\u0993" - "\u09a8", "\u09aa" - "\u09b0", "\u09b2", "\u09b6" - "\u09b9", "\u09dc" - "\u09dd", "\u09df" - "\u09e1", "\u09f0" - "\u09f1", "\u0a05" - "\u0a0a", "\u0a0f" - "\u0a10", "\u0a13" - "\u0a28", "\u0a2a" - "\u0a30", "\u0a32" - "\u0a33", "\u0a35" - "\u0a36", "\u0a38" - "\u0a39", "\u0a59" - "\u0a5c", "\u0a5e", "\u0a72" - "\u0a74", "\u0a85" - "\u0a8b", "\u0a8d", "\u0a8f" - "\u0a91", "\u0a93" - "\u0aa8", "\u0aaa" - "\u0ab0", "\u0ab2" - "\u0ab3", "\u0ab5" - "\u0ab9", "\u0abd", "\u0ae0", "\u0b05" - "\u0b0c", "\u0b0f" - "\u0b10", "\u0b13" - "\u0b28", "\u0b2a" - "\u0b30", "\u0b32" - "\u0b33", "\u0b36" - "\u0b39", "\u0b3d", "\u0b5c" - "\u0b5d", "\u0b5f" - "\u0b61", "\u0b85" - "\u0b8a", "\u0b8e" - "\u0b90", "\u0b92" - "\u0b95", "\u0b99" - "\u0b9a", "\u0b9c", "\u0b9e" - "\u0b9f", "\u0ba3" - "\u0ba4", "\u0ba8" - "\u0baa", "\u0bae" - "\u0bb5", "\u0bb7" - "\u0bb9", "\u0c05" - "\u0c0c", "\u0c0e" - "\u0c10", "\u0c12" - "\u0c28", "\u0c2a" - "\u0c33", "\u0c35" - "\u0c39", "\u0c60" - "\u0c61", "\u0c85" - "\u0c8c", "\u0c8e" - "\u0c90", "\u0c92" - "\u0ca8", "\u0caa" - "\u0cb3", "\u0cb5" - "\u0cb9", "\u0cde", "\u0ce0" - "\u0ce1", "\u0d05" - "\u0d0c", "\u0d0e" - "\u0d10", "\u0d12" - "\u0d28", "\u0d2a" - "\u0d39", "\u0d60" - "\u0d61", "\u0e01" - "\u0e2e", "\u0e30", "\u0e32" - "\u0e33", "\u0e40" - "\u0e45", "\u0e81" - "\u0e82", "\u0e84", "\u0e87" - "\u0e88", "\u0e8a", "\u0e8d", "\u0e94" - "\u0e97", "\u0e99" - "\u0e9f", "\u0ea1" - "\u0ea3", "\u0ea5", "\u0ea7", "\u0eaa" - "\u0eab", "\u0ead" - "\u0eae", "\u0eb0", "\u0eb2" - "\u0eb3", "\u0ebd", "\u0ec0" - "\u0ec4", "\u0f40" - "\u0f47", "\u0f49" - "\u0f69", "\u10a0" - "\u10c5", "\u10d0" - "\u10f6", "\u1100", "\u1102" - "\u1103", "\u1105" - "\u1107", "\u1109", "\u110b" - "\u110c", "\u110e" - "\u1112", "\u113c", "\u113e", "\u1140", "\u114c", "\u114e", "\u1150", "\u1154" - "\u1155", "\u1159", "\u115f" - "\u1161", "\u1163", "\u1165", "\u1167", "\u1169", "\u116d" - "\u116e", "\u1172" - "\u1173", "\u1175", "\u119e", "\u11a8", "\u11ab", "\u11ae" - "\u11af", "\u11b7" - "\u11b8", "\u11ba", "\u11bc" - "\u11c2", "\u11eb", "\u11f0", "\u11f9", "\u1e00" - "\u1e9b", "\u1ea0" - "\u1ef9", "\u1f00" - "\u1f15", "\u1f18" - "\u1f1d", "\u1f20" - "\u1f45", "\u1f48" - "\u1f4d", "\u1f50" - "\u1f57", "\u1f59", "\u1f5b", "\u1f5d", "\u1f5f" - "\u1f7d", "\u1f80" - "\u1fb4", "\u1fb6" - "\u1fbc", "\u1fbe", "\u1fc2" - "\u1fc4", "\u1fc6" - "\u1fcc", "\u1fd0" - "\u1fd3", "\u1fd6" - "\u1fdb", "\u1fe0" - "\u1fec", "\u1ff2" - "\u1ff4", "\u1ff6" - "\u1ffc", "\u2126", "\u212a" - "\u212b", "\u212e", "\u2180" - "\u2182", "\u3041" - "\u3094", "\u30a1" - "\u30fa", "\u3105" - "\u312c", "\uac00" - "\ud7a3"] >
}

TOKEN :
{
 < #Ideographic : ["\u4e00" - "\u9fa5", "\u3007", "\u3021" - "\u3029"] >
}

TOKEN :
{
 < #CombiningChar : ["\u0300" - "\u0345", "\u0360" - "\u0361", "\u0483" - "\u0486", "\u0591" - "\u05a1", "\u05a3" - "\u05b9", "\u05bb" - "\u05bd", "\u05bf", "\u05c1" - "\u05c2", "\u05c4", "\u064b" - "\u0652", "\u0670", "\u06d6" - "\u06dc", "\u06dd" - "\u06df", "\u06e0" - "\u06e4", "\u06e7" - "\u06e8", "\u06ea" - "\u06ed", "\u0901" - "\u0903", "\u093c", "\u093e" - "\u094c", "\u094d", "\u0951" - "\u0954", "\u0962" - "\u0963", "\u0981" - "\u0983", "\u09bc", "\u09be", "\u09bf", "\u09c0" - "\u09c4", "\u09c7" - "\u09c8", "\u09cb" - "\u09cd", "\u09d7", "\u09e2" - "\u09e3", "\u0a02", "\u0a3c", "\u0a3e", "\u0a3f", "\u0a40" - "\u0a42", "\u0a47" - "\u0a48", "\u0a4b" - "\u0a4d", "\u0a70" - "\u0a71", "\u0a81" - "\u0a83", "\u0abc", "\u0abe" - "\u0ac5", "\u0ac7" - "\u0ac9", "\u0acb" - "\u0acd", "\u0b01" - "\u0b03", "\u0b3c", "\u0b3e" - "\u0b43", "\u0b47" - "\u0b48", "\u0b4b" - "\u0b4d", "\u0b56" - "\u0b57", "\u0b82" - "\u0b83", "\u0bbe" - "\u0bc2", "\u0bc6" - "\u0bc8", "\u0bca" - "\u0bcd", "\u0bd7", "\u0c01" - "\u0c03", "\u0c3e" - "\u0c44", "\u0c46" - "\u0c48", "\u0c4a" - "\u0c4d", "\u0c55" - "\u0c56", "\u0c82" - "\u0c83", "\u0cbe" - "\u0cc4", "\u0cc6" - "\u0cc8", "\u0cca" - "\u0ccd", "\u0cd5" - "\u0cd6", "\u0d02" - "\u0d03", "\u0d3e" - "\u0d43", "\u0d46" - "\u0d48", "\u0d4a" - "\u0d4d", "\u0d57", "\u0e31", "\u0e34" - "\u0e3a", "\u0e47" - "\u0e4e", "\u0eb1", "\u0eb4" - "\u0eb9", "\u0ebb" - "\u0ebc", "\u0ec8" - "\u0ecd", "\u0f18" - "\u0f19", "\u0f35", "\u0f37", "\u0f39", "\u0f3e", "\u0f3f", "\u0f71" - "\u0f84", "\u0f86" - "\u0f8b", "\u0f90" - "\u0f95", "\u0f97", "\u0f99" - "\u0fad", "\u0fb1" - "\u0fb7", "\u0fb9", "\u20d0" - "\u20dc", "\u20e1", "\u302a" - "\u302f", "\u3099", "\u309a"] >
}

TOKEN :
{
 < #Digit : ["0" - "9", "\u0660" - "\u0669", "\u06f0" - "\u06f9", "\u0966" - "\u096f", "\u09e6" - "\u09ef", "\u0a66" - "\u0a6f", "\u0ae6" - "\u0aef", "\u0b66" - "\u0b6f", "\u0be7" - "\u0bef", "\u0c66" - "\u0c6f", "\u0ce6" - "\u0cef", "\u0d66" - "\u0d6f", "\u0e50" - "\u0e59", "\u0ed0" - "\u0ed9", "\u0f20" - "\u0f29"] >
}

TOKEN :
{
 < #Extender : ["\u00b7", "\u02d0", "\u02d1", "\u0387", "\u0640", "\u0e46", "\u0ec6", "\u3005", "\u3031" - "\u3035", "\u309d" - "\u309e", "\u30fc" - "\u30fe"] >
}

<DEFAULT, EXPR_COMMENT>
SKIP :
{
 < CommentStart : "(:" > { pushState(); } : EXPR_COMMENT
}

<EXPR_COMMENT>
SKIP :
{
 < CommentEnd : ":)" > { popState(); }
}

<EXPR_COMMENT>
SKIP :
{
 < CommentContent : <Char> >
}

<DEFAULT>
SKIP :
{
 < ImplicitlyAllowedWhitespace : (<WhitespaceChar>)+  >
}

<?xml version="1.0"?>
<project name="xpath-benchmark" default="all" basedir="."
         xmlns:unless="ant:unless">

  <description>
This buildfile is used to retrieve and parse XPath expressions from various sources.
  </description>
  <target name="all" depends="compile,saxon,sources.xslt,sources.xquery"/>

  <property name="online" value="true"/>

  <!-- path to schemas -->  
  <fileset id="fs.schemas" dir="../xsd" includes="xpath*.xsd"/>
  <pathconvert property="schemas" refid="fs.schemas" pathsep=" "/>
  <fileset id="fs.relaxng" dir="../relaxng" includes="xpath-*.rnc"/>
  <pathconvert property="relaxng" refid="fs.relaxng" pathsep=" "/>

  <!-- path to classes -->
  <path id="classpath">
    <pathelement path="../target/classes"/>
    <pathelement path="../lib/jing.jar"/>
  </path>
  
  <!-- macro for processing benchmark files -->
  <macrodef name="process">
    <attribute name="name"/>
    <attribute name="includes"/>
    <attribute name="arg"/>
    <attribute name="license" default=""/>
    <sequential>
      <local name="tests"/>
      <local name="count.tests"/>
      <fileset id="fs.tests" dir="@{name}" includes="@{includes}"/>
      <pathconvert property="tests" refid="fs.tests" pathsep=" "/>
      <resourcecount property="count.tests" refid="fs.tests"/>
      <echo message="Parsing ${count.tests} files..."/>
      <java fork="yes" classname="fr.lsv.xpparser.Main"
            classpathref="classpath"
            output="@{name}-full.xml" error="@{name}.log">
        <assertions><!-- this is ignored!!! -->
          <enable/>
        </assertions>
        <arg line="@{arg} --unique ${tests} --rnc ${relaxng}"/>
      </java>
      <copy unless:blank="@{license}"
            file="@{name}/@{license}" tofile="@{name}.LICENSE"/>
      <xslt style="../xslt/filter.xsl"
          in="@{name}-full.xml"
          out="@{name}.xml">
        <classpath>
          <pathelement path="../lib/saxon9he.jar"/>
        </classpath>
      </xslt>
    </sequential>
  </macrodef>

  <!-- main macro for benchmarks -->
  <macrodef name="benchmark">
    <attribute name="name"/>
    <attribute name="src"/>
    <attribute name="includes"/>
    <attribute name="arg"/>
    <attribute name="license" default=""/>
    <sequential>
      <local name="offline"/>
      <available file="@{name}" property="offline"/>
      <mkdir unless:set="offline" dir="@{name}"/>
      <get unless:set="offline" src="@{src}"
           dest="@{name}/source.zip" usetimestamp="true"/>
      <unzip unless:set="offline" src="@{name}/source.zip"
             dest="@{name}" overwrite="no"/>
      <process name="@{name}" includes="@{includes}" arg="@{arg}"
               license="@{license}"/>
    </sequential>
  </macrodef>

  <target name="compile" description="Compile xpparser">
    <subant target="compile">
      <fileset dir=".." includes="build.xml"/>
    </subant>
  </target>

  <!-- ===============================================================
       Tests are not representative of actual XPath content `out there'
       but are useful to test our parser.
  -->
  
  <target name="tests" depends="w3c,xpathmark"/>

  <!-- W3C test-suite -->
  <target name="w3c">
    <benchmark name="w3c"
       src="https://dev.w3.org/2011/QT3-test-suite/releases/QT3_1_0.zip"
       includes="QT3_1_0/*/*.xml,QT3_1_0/*/*/*.xml" arg="--xml &quot;//*[local-name() = 'test' and preceding-sibling::*[local-name() = 'dependency' and @type='spec' and starts-with(@value,'XP')] and not(following-sibling::*[local-name() = 'result' and descendant::*[local-name() = 'error']])]&quot;"/>
  </target>

  <!-- XPathMark -->
  <target name="xpathmark">
    <benchmark name="xpathmark"
      src="http://users.dimi.uniud.it/~massimo.franceschet/xpathmark/PT/queries.zip"
      includes="xpath-pt/xslt/*.xsl" arg="--xml '//@select'"/>
  </target>

  <!-- ===============================================================
       Sources are assumed to provide a good insight into what kind of
       XPath expressions are actually used in practice.
  -->
  
  <target name="sources.xslt" depends="docbook,htmlbook"/>
  <target name="sources.xquery" depends="existdb,marklogic,xqjson,histei"/>
  
  <!-- DocBook XSL -->
  <target name="docbook">
    <mkdir dir="docbook"/>
    <get src="https://freefr.dl.sourceforge.net/project/docbook/docbook-xsl/1.79.1/docbook-xsl-1.79.1.tar.bz2"
         dest="docbook/" usetimestamp="true"/>
    <bunzip2 src="docbook/docbook-xsl-1.79.1.tar.bz2"/>
    <untar src="docbook/docbook-xsl-1.79.1.tar" dest="docbook"
           overwrite="no"/>
    <process name="docbook" includes="docbook-xsl-1.79.1/*/*.xsl,docbook-xsl-1.79.1/*.xsl"
             arg="--xslt" license="docbook-xsl-1.79.1/COPYING"/>
  </target>
  
  <!-- HTMLBook -->
  <target name="htmlbook">
    <benchmark name="htmlbook"
      src="https://github.com/oreillymedia/HTMLBook/archive/master.zip"
      includes="HTMLBook-master/htmlbook-xsl/*.xsl" arg="--xslt"
      license="HTMLBook-master/LICENSE"/>
  </target>
  
  
  <target name="marklogic">
    <benchmark name="marklogic"
               src="https://github.com/marklogic/commons/archive/master.zip"
               includes="commons-master/*/*.xqy" 
               arg="--xquery ../xslt/xqx2xql.xsl"/>
  </target>

  <target name="xqjson">
    <benchmark name="xqjson"
               src="https://github.com/joewiz/xqjson/archive/master.zip"
               includes="xqjson-master/src/content/*.xql"
               arg="--xquery ../xslt/xqx2xql.xsl" license="xqjson-master/LICENSE.txt"/>
  </target>

  <target name="histei">
    <benchmark name="histei"
               src="https://github.com/odaata/HisTEI/archive/master.zip"
               includes="HisTEI-master/frameworks/HisTEI/resources/*.xq*"
               arg="--xquery ../xslt/xqx2xql.xsl"
               license="HisTEI-master/LICENSE"/>
  </target>

  <!-- part of eXist-db -->
  <target name="xprocxq">
    <benchmark name="xprocxq"
               src="https://storage.googleapis.com/google-code-archive-source/v2/code.google.com/xprocxq/source-archive.zip"
               includes="xprocxq/trunk/main/*/xquery/*.xq*"
               arg="--xquery ../xslt/xqx2xql.xsl"
               license="xprocxq/trunk/main/LICENSE"/>
  </target>

  <target name="basex">
      <mkdir dir="basex"/>
      <get src="http://files.basex.org/releases/8.5.3/BaseX853.zip"
           dest="basex/source.zip" usetimestamp="true"/>
      <unzip src="basex/source.zip" dest="basex" overwrite="no"/>
      <unzip src="basex/basex/etc/modules.zip"
             dest="basex/basex/etc/modules/src/"/>
      <process name="basex" includes="basex/*/*/*/*.xq*" 
               arg="--xquery ../xqx2xql.xsl"
               license="basex/LICENSE"/>    
  </target>

  <target name="existdb">
    <benchmark name="existdb"
               src="https://codeload.github.com/eXist-db/exist/zip/develop"
               includes="exist-develop/test/src/xquery/*.xql,exist-develop/test/src/xquery/xquery3/*.xql,exist-develop/webapp/xqts/*.xql,exist-develop/webapp/*.xql,exist-develop/src/org/exist/*/*/*.xq*,exist-develop/extensions/indexes/lucene/test/src/xquery/lucene/*.xql,exist-develop/extensions/indexes/range/test/src/xquery/*.xql,exist-develop/extensions/modules/src/org/exist/xquery/modules/*/*.xq*,exist-develop/extensions/xprocxq/main/src/*/*.xq*"
               arg="--xquery ../xslt/xqx2xql.xsl"
               license="exist-develop/LICENSE"/>
  </target>
  
  <!-- download saxon if needed -->
  <target name="saxon">
    <local name="offline"/>
    <available file="../lib/saxon9he.jar" property="offline"/>
    <mkdir unless:set="offline" dir="../lib"/>
    <get unless:set="offline"
         src="https://downloads.sourceforge.net/project/saxon/Saxon-HE/9.7/SaxonHE9-7-0-14J.zip?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fsaxon%2Ffiles%2FSaxon-HE%2F9.7%2F&amp;ts=1485885576&amp;use_mirror=vorboss"
         dest="../lib" usetimestamp="true"/>
    <unzip unless:set="offline" src="../lib/SaxonHE9-7-0-14J.zip" dest="../lib"
           overwrite="no"/>
  </target>
</project>

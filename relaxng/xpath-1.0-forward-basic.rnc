# Forward DataXPath fragment with basic extensions.
#
# Copyright (C) 2016-2019
#   David Baelde, Anthony Lick and Sylvain Schmitz (ENS Paris-Saclay)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

default namespace = "http://www.w3.org/2005/XQueryX"
namespace xqx = "http://www.w3.org/2005/XQueryX"

include "xpath-1.0-forward-orig.rnc" {
  start = root.expr
}

root.expr =  expr | element pathExpr { element rootExpr { empty }, step* }
        | element pathExpr {
            element stepExpr {
              element filterExpr { fun.root }, predicates?
            }, step*
          }
        | root.op | root.fun

root.op = element ( andOp | orOp | unionOp ) {
  element firstOperand  { root.expr },
  element secondOperand { root.expr }
}

root.fun = fun.root | element functionCallExpr {
  element functionName { external "fn/bool.rnc" },
  element arguments { root.expr* }?
}

fun.root = element functionCallExpr {
  element functionName {
    attribute xqx:prefix { string "fn" }?,
    attribute xqx:URI { string "http://www.w3.org/2005/xpath-functions" }?,
    ( string "root")
  },
  element arguments { expr* }?
}

# ---------------------------------------------------------------------------
# Allow constants

primary |=  literal

op |= element ( eqOp | neOp | equalOp | notEqualOp  # equality
              | ltOp | leOp | gtOp | geOp           # order
              | lessThanOp  | lessThanOrEqualOp
              | greaterThanOp | greaterThanOrEqualOp
              ) {
    ( element firstOperand  { expr },
      element secondOperand { cst.expr })
  | ( element firstOperand  { cst.expr },
      element secondOperand { expr } )
}

op |= cst.op

# ---------------------------------------------------------------------------
# Allow some functions

fun |= cst.fun

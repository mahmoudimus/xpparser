# XPath 2.0 Core fragment extended with data joins
#
# Copyright (C) 2016-2019
#   David Baelde, Anthony Lick and Sylvain Schmitz (ENS Paris-Saclay)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

default namespace = "http://www.w3.org/2005/XQueryX"
namespace xqx = "http://www.w3.org/2005/XQueryX"

include "misc/join.rnc"

include "xpath-2.0-core-basic.rnc" {
  start = join.expr | last.dummy
}

join.op |= element ( intersectOp | isOp | nodeBeforeOp | nodeAfterOp ) {
  element firstOperand { join.expr },
  element secondOperand { join.expr }
}

join.op |= element exceptOp {
  element firstOperand { join.expr },
  element secondOperand { expr }
}

join.expr |= element quantifiedExpr {
  element quantifier { string "some" },
  element quantifiedExprInClause {
    element typedVariableBinding {
      element varName { external "misc/eqname.rnc" }
    },
    element sourceExpr { join.expr }
  }+,
  element predicateExpr { join.expr }
}

join.primary |= varref

join.step |= element stepExpr {
  ((join.axis, join.nodetest) | element filterExpr { primary } ),
  element predicates {
    (last.op | last.fun | expr)*,
    joinlast.expr,
    join.expr*
  }
}
joinlast.expr = element andOp {
  (element firstOperand { joinlast.expr },
   element secondOperand { joinlast.expr }) |
  (element secondOperand { joinlast.expr },
   element firstOperand { joinlast.expr })
}
joinlast.expr |= last.op | join.expr

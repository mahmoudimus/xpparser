# Helper for defining *-id XPath fragments, where id() is admissible
#
# Copyright (C) 2016  Sylvain Schmitz (ENS Cachan)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

default namespace = "http://www.w3.org/2005/XQueryX"
namespace xqx = "http://www.w3.org/2005/XQueryX"

# ----------------------------------------------------------------
# Expressions

id.expr = id.op | id.path | id.primary | expr

# ----------------------------------------------------------------
# Operations

# Basic operations
id.op = element ( andOp | orOp | unionOp ) {
  element firstOperand  { id.expr },
  element secondOperand { id.expr }
}

id.op |= element ( eqOp | neOp | equalOp | notEqualOp  # equality
              | ltOp | leOp | gtOp | geOp           # order
              | lessThanOp  | lessThanOrEqualOp
              | greaterThanOp | greaterThanOrEqualOp
              ) {
    ( element firstOperand  { id.expr },
      element secondOperand { cst.expr })
  | ( element firstOperand  { cst.expr },
      element secondOperand { id.expr } )
}

id.op |= cst.op

# ----------------------------------------------------------------
# Function calls

id.primary =  element contextItemExpr { empty }
        |  id.fun
        |  element sequenceExpr { id.expr* }

# Boolean functions

id.fun = element functionCallExpr {
  element functionName { external "../fn/bool.rnc" },
  element arguments { id.expr* }?
}

# id()

id.fun |= element functionCallExpr {
  element functionName {
    attribute xqx:prefix { string "fn" }?,
    attribute xqx:URI { string "http://www.w3.org/2005/xpath-functions" }?,
    ( string "id" | string "idref" | string "element-with-id" )
  },
  element arguments { id.expr* }?
}

# ----------------------------------------------------------------
# Paths

id.path = element pathExpr {
  ( element rootExpr { empty }, id.step* ) | id.step+
}

id.step = element stepExpr {
  ((id.axis, id.nodetest) | element filterExpr { id.primary } ),
  id.predicates?
}

id.step |= step

id.axis = axis
    
id.nodetest = element nameTest { external "eqname.rnc" }
  | external "tests.rnc"
  | element Wildcard {
      ( element star { empty } & element NCName { xsd:NCName } )?
  }

id.predicates = element predicates { expr* }

# Id XPath fragment of XQueryX in Relax NG compact syntax
# Used for the -id fragments
#
# Copyright (C) 2016-2019
#   David Baelde, Anthony Lick and Sylvain Schmitz (ENS Paris-Saclay)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

default namespace = "http://www.w3.org/2005/XQueryX"
namespace xqx = "http://www.w3.org/2005/XQueryX"

# ----------------------------------------------------------------
# Function calls

id.primary = primary
           | id.fun

# id function
id.fun |= element functionCallExpr {
  element functionName {
    attribute xqx:prefix { string "fn" }?,
    attribute xqx:URI { string "http://www.w3.org/2005/xpath-functions" }?,
    ( string "id" | string "idref" | string "element-with-id" )
  },
  element arguments { (id.path | id.primary)? }?
}

# ----------------------------------------------------------------
# Paths

id.path = id.rootedpath | id.notrootedpath | id.fun

id.rootedpath = element pathExpr {
  ( element rootExpr { empty } 
  | element stepExpr { 
      element filterExpr {
        element functionCallExpr {
          element functionName {
            attribute xqx:prefix { string "fn" }?,
            attribute xqx:URI { string "http://www.w3.org/2005/xpath-functions" }?,
            ( string "root")
          },
        element arguments { empty }? # Can the root() function have an argument?
        }
      }
    }
  ), id.step* 
}

id.notrootedpath = element pathExpr {
  id.step+
}

id.step = element stepExpr {
  ((id.axis, id.nodetest) | element filterExpr { id.primary } ),
  id.predicates?
}

id.step |= step

id.axis = axis
    
id.nodetest = element nameTest { external "eqname.rnc" }
  | external "tests.rnc"
  | element Wildcard {
      ( element star { empty } & element NCName { xsd:NCName } )?
  }

# pi_id ::= ... | p_id[phi] 
id.predicates = element predicates { expr* }

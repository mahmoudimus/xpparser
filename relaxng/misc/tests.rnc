# XPath fragment of XQueryX in Relax NG compact syntax
# Kind tests.
#
# Copyright (C) 2016-2019
#   David Baelde, Anthony Lick and Sylvain Schmitz (ENS Paris-Saclay)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

default namespace = "http://www.w3.org/2005/XQueryX"

# [71]  KindTest  ::=   DocumentTest
#                     | ElementTest
#                     | AttributeTest
#                     | SchemaElementTest
#                     | SchemaAttributeTest
#                     | PITest
#                     | CommentTest
#                     | TextTest
#                     | NamespaceNodeTest
#                     | AnyKindTest 
# [75] CommentTest ::=  "comment" "(" ")"   
# [74] TextTest    ::=  "text" "(" ")"
# [76] NamespaceNodeTest  ::=  "namespace-node" "(" ")"
# [72] AnyKindTest        ::=  "node" "(" ")"
start = document.test | element.test | attribute.test | schemae.test
      | schemaa.test | pi.test
      | element ( commentTest | textTest | namespaceTest | anyKindTest )
          { empty }

# [73] DocumentTest   ::=  "document-node" "("
#                          (ElementTest | SchemaElementTest)? ")"
document.test = element documentTest {
  ( element.test | schemae.test )?
}

# [82] ElementTest           ::=  "element" "(" (ElementNameOrWildcard
#                                                ("," TypeName "?"?)?)? ")"
# [83] ElementNameOrWildcard ::=  ElementName | "*"
# [87] ElementName 	     ::=  EQName
# [89] TypeName 	     ::=  EQName
element.test = element elementTest {
  element elementName {
    element QName { external "eqname.rnc" }
    | element star { empty }
  }?,
  ( element typeName { external "eqname.rnc" },
    element nillable { empty }? )?
}

# [78] AttributeTest        ::=  "attribute" "(" (AttribNameOrWildcard
#                                                 ("," TypeName)?)? ")"
# [79] AttribNameOrWildcard ::=	 AttributeName | "*"
# [86] AttributeName        ::=  EQName
attribute.test = element attributeTest {
  element attributeName {
    element QName { external "eqname.rnc" }
    | element star { empty }
  }?,
  element typeName { external "eqname.rnc" }?
}

# [84] SchemaElementTest  ::=  "schema-element" "(" ElementDeclaration ")"
# [85] ElementDeclaration ::=  ElementName
schemae.test = element schemaElementTest {
  external "eqname.rnc"
}

# [80] SchemaAttributeTest  ::=  "schema-attribute" "("
#                                AttributeDeclaration ")"
# [81] AttributeDeclaration ::=  AttributeName
schemaa.test = element schemaAttributeTest {
  external "eqname.rnc"
}

# [77] PITest ::= "processing-instruction" "(" (NCName | StringLiteral)? ")"
pi.test = element piTest {
  element piTarget { text }?
}

# XPath fragment of XQueryX in Relax NG compact syntax
#
# Copyright (C) 2016  Sylvain Schmitz (ENS Cachan)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

default namespace = "http://www.w3.org/2005/XQueryX"

start = expr

include "expr/pure.rnc"

# ----------------------------------------------------------------
# Expressions

expr |= op | path | primary

include "expr/if.rnc"

# ----------------------------------------------------------------
# Operations

op =  element ( andOp | orOp | unionOp ) {
  element firstOperand  { expr },
  element secondOperand { expr }
}

op |= element ( eqOp | neOp | equalOp | notEqualOp  # equality
              | ltOp | leOp | gtOp | geOp           # order
              | lessThanOp  | lessThanOrEqualOp
              | greaterThanOp | greaterThanOrEqualOp
              ) {
    ( element firstOperand  { cstexpr },
      element secondOperand { expr } )
  | ( element firstOperand  { expr },
      element secondOperand { cstexpr })
}

# ----------------------------------------------------------------
# Function calls

primary =  external "expr/literal.rnc"
        |  cstfun
        |  element contextItemExpr { empty }
        |  fun
        |  element sequenceExpr { expr* }

fun = element FunctionCallExpr {
element functionName { external "fn/bool.rnc" },
  element arguments {
    ( expr | element argumentPlaceholder { empty } )*
  }?
}


# ----------------------------------------------------------------
# Paths

path = element pathExpr {
  ( element rootExpr { empty }, step* ) | step+
}

step = element stepExpr {
  ((axis, nodetest) | element filterExpr { primary } ),
  element predicates { expr* }?
}

axis = element xpathAxis {
  ( string "child"
  | string "attribute"
  | string "self"
  | string "parent"
  | string "descendant-or-self"
  | string "descendant"
  | string "following"
  | string "following-sibling"
  | string "ancestor"
  | string "ancestor-or-self"
  | string "preceding"
  | string "preceding-sibling"
  | string "namespace" )
}

nodetest = element nameTest { external "misc/eqname.rnc" }
  | external "misc/tests.rnc"
  | element Wildcard {
      ( element star { empty } & element NCName { xsd:NCName } )?
    | ( element uri  { xsd:string }, element star { empty } )?
  }

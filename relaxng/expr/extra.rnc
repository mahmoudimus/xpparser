# XPath fragment of XQueryX in Relax NG compact syntax:
# XPath extra features.
#
# Copyright (C) 2016-2017
#   David Baelde, Anthony Lick and Sylvain Schmitz (ENS Cachan)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses>.

default namespace = "http://www.w3.org/2005/XQueryX"
namespace xqx = "http://www.w3.org/2005/XQueryX"

fun.extra = fun.arith | fun.string

fun.arith = element functionCallExpr {
  element functionName {
    attribute xqx:prefix { string "fn" }?,
    attribute xqx:URI { string "http://www.w3.org/2005/xpath-functions" }?,
    ( string "string-length"
    )
  },
  element arguments {
    ( expr | element argumentPlaceholder { empty } )*
  }?
}

fun.string = element functionCallExpr {
  element functionName {
    attribute xqx:prefix { string "fn" }?,
    attribute xqx:URI { string "http://www.w3.org/2005/xpath-functions" }?,
    ( string "concat"
    | string "contains"
    | string "ends-with"
    | string "starts-with"
    | string "string-join"
    | string "substring"
    | string "substring-after"
    | string "substring-before"
    | string "translate"
    )
  },
  element arguments {
    ( expr | element argumentPlaceholder { empty } )*
  }?
}

op.extra = op.arith | op.string |
    element ( eqOp | neOp | equalOp | notEqualOp
            | ltOp | leOp | gtOp | geOp
            | lessThanOp  | lessThanOrEqualOp
            | greaterThanOp | greaterThanOrEqualOp ) {
      ( element firstOperand  { op.arith }, element secondOperand { op.arith } )
    | ( element firstOperand  { op.arith }, element secondOperand { path } )
    | ( element firstOperand  { path }, element secondOperand { op.arith } )
  }
  | element ( eqOp | neOp | equalOp | notEqualOp ) {
      ( element firstOperand  { op.string }, element secondOperand { op.string } )
    | ( element firstOperand  { op.string }, element secondOperand { path } )
    | ( element firstOperand  { path }, element secondOperand { op.string } )
  }

op.arith = fun.arith | varref | num
  | element ( addOp | subtractOp | modOp ) {
       element firstOperand { op.arith },
       element secondOperand { op.arith }
  }

op.string = fun.string | varref | str | path
  | element stringConcatenateOp {
              element firstOperand  { op.string },
              element secondOperand { op.string }
          }

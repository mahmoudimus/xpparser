# Positive XPath fragment of XQueryX in Relax NG compact syntax
# Used for the XPath Patterns fragment
#
# Copyright (C) 2016  Sylvain Schmitz (ENS Cachan)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

default namespace = "http://www.w3.org/2005/XQueryX"
namespace xqx = "http://www.w3.org/2005/XQueryX"

# ----------------------------------------------------------------
# Expressions

pos.expr = pos.op | pos.path | pos.primary

# ----------------------------------------------------------------
# Operations

# Basic operations
pos.op = element ( andOp | orOp | unionOp ) {
  element firstOperand  { pos.expr },
  element secondOperand { pos.expr }
}

# positive equality checks
pos.op |= element ( eqOp | equalOp ) {
  element firstOperand  { pos.expr },
  element secondOperand { pos.expr }
}

# ----------------------------------------------------------------
# Function calls

pos.primary =  element contextItemExpr { empty }
        |  pos.fun
        |  element sequenceExpr { pos.expr* }

# Boolean functions

pos.fun = element functionCallExpr {
  element functionName {
      attribute xqx:prefix { string "fn" }?,
      attribute xqx:URI { string "http://www.w3.org/2005/xpath-functions" }?,
    ( string "true"
    | string "false"
    | string "boolean" )
  },
  element arguments { pos.expr* }?
}

# ----------------------------------------------------------------
# Paths

pos.path = element pathExpr {
  ( element rootExpr { empty }, pos.step* ) | pos.step+
}

pos.step = element stepExpr {
  ((pos.axis, pos.nodetest) | element filterExpr { pos.primary } ),
  pos.predicates?
}

pos.axis = forward.pos.axis | backward.pos.axis | deterministic.pos.axis

forward.pos.axis = element xpathAxis {
  ( string "child"
  | string "descendant-or-self"
  | string "descendant"
  | string "following-sibling"
  )
}

backward.pos.axis = element xpathAxis {
    string "following" # equivalent to descendant | ancestor/following-sibling/descendant-or-self
  | string "ancestor"
  | string "ancestor-or-self"
  | string "preceding"
  | string "preceding-sibling"
}
    
deterministic.pos.axis = element xpathAxis {
    string "attribute"
  | string "self"
  | string "parent"
}

pos.nodetest = element nameTest { external "../misc/eqname.rnc" }
  | external "../misc/tests.rnc"
  | element Wildcard {
      ( element star { empty } & element NCName { xsd:NCName } )?
  }

# which predicates can we handle?
pos.predicates = element predicates { pos.expr* }

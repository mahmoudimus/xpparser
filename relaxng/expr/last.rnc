# XPath fragment of XQueryX in Relax NG compact syntax
# Simple Xpath expressions involving the function last().
#
# Copyright (C) 2016  Sylvain Schmitz (ENS Cachan)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

default namespace = "http://www.w3.org/2005/XQueryX"
namespace xqx = "http://www.w3.org/2005/XQueryX"

# To catch equality between position() and last()
last.op = element ( eqOp | equalOp | neOp | notEqualOp ) {
  element firstOperand  { last.fun },
  element secondOperand { last.fun }
}

# Could be last() or position()
last.fun = element functionCallExpr {
  element functionName { 
    attribute xqx:prefix { string "fn" }?,
    attribute xqx:URI { string "http://www.w3.org/2005/xpath-functions" }?,
    ( string "last" | string "position" )
  },
  element arguments { empty }?
}
  | int

# Allowed axes before a [last()] predicate.
# Should be modified to a safe value when including this file.
last.axis = notAllowed

# to catch [last()] and its equivalent [position() = last()]
last.predicate = element predicates {
  (expr | last.op | last.fun)*
}

last.step = element stepExpr {
  ((last.axis, nodetest) | element filterExpr { last.primary }),
  last.predicate?
}

last.primary = literal
  |  element contextItemExpr { empty }
  |  fun
  |  element sequenceExpr { last.path* }

last.path = element pathExpr {
  ( element rootExpr { empty }, last.step* ) | last.step+
}

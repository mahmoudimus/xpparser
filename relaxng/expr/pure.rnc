# XPath fragment of XQueryX in Relax NG compact syntax
# Xpath literals.
#
# Copyright (C) 2016  Sylvain Schmitz (ENS Cachan)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

default namespace = "http://www.w3.org/2005/XQueryX"
namespace xqx = "http://www.w3.org/2005/XQueryX"

# TODO create a variant based on 1.0 rather than 3.0 functions
# TODO check about argumentPlaceholder that I removed ?

include "../fn/pure.rnc"

start = cstexpr

cstexpr = external "literal.rnc" | fun | op

fun = element functionCallExpr {
  element functionName { pure | external "../fn/math.rnc" },
  element arguments {
    ( cstexpr )*
  }?
}

fun |= element functionCallExpr {
  element functionName { pure1 },
  element arguments {
    cstexpr
  }?
}

fun |= element functionCallExpr {
  element functionName { pure2 },
  element arguments {
    cstexpr, cstexpr
  }?
}

fun |= element functionCallExpr {
  element functionName { pure3 },
  element arguments {
    cstexpr, cstexpr, cstexpr
  }?
}

op =  element ( andOp | orOp                        # Boolean
              | eqOp | neOp | equalOp | notEqualOp  # equality
              | ltOp | leOp | gtOp | geOp           # order
              | lessThanOp  | lessThanOrEqualOp
              | greaterThanOp | greaterThanOrEqualOp
              | addOp | subtractOp | multiplyOp     # arithmetic
              | divOp | idivOp | modOp
              | stringConcatenateOp                 # string
              ) {
  element firstOperand  { cstexpr },
  element secondOperand { cstexpr }
}

op |= element ( unaryPlusOp | unaryMinusOp ) {
  element operand { cstexpr }
}
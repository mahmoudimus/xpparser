# EMSO2 XPath fragment of XQueryX in Relax NG compact syntax
# Used for the XPath Patterns fragment
#
# Copyright (C) 2016-2019
#   David Baelde, Anthony Lick and Sylvain Schmitz (ENS Paris-Saclay)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

default namespace = "http://www.w3.org/2005/XQueryX"
namespace xqx = "http://www.w3.org/2005/XQueryX"

include "xpath-1.0-core-orig.rnc"

local.path = element contextItemExpr { empty }
 | element pathExpr {
     element stepExpr {
       ((element xpathAxis { string "self" }, nodetest)
        | element filterExpr { element contextItemExpr { empty }}),
       predicates?
     }
   }

one.path = element contextItemExpr { empty }
 | element pathExpr {
     element stepExpr {
       ((axis, nodetest)
        | element filterExpr { element contextItemExpr  { empty }}),
       predicates?
     }
   }
   
rooted.path
  = fun.root
  | element pathExpr {
      element rootExpr { empty }, step*
    }
  | element pathExpr {
      element stepExpr { element filterExpr { fun.root } },
      step*
    }
    
fun.root = element functionCallExpr {
  element functionName {
    attribute xqx:prefix { string "fn" }?,
    attribute xqx:URI { string "http://www.w3.org/2005/xpath-functions" }?,
    ( string "root")
  },
  element arguments { expr* }?
}

# data test using an absolute path on one side
op |= element ( eqOp | neOp | equalOp | notEqualOp ) {
    ( element firstOperand  { expr },
      element secondOperand { rooted.path })
  | ( element firstOperand  { rooted.path },
      element secondOperand { expr })
  | ( element firstOperand  { local.path },
      element secondOperand { one.path })
  | ( element firstOperand  { one.path },
      element secondOperand { local.path })
}

# ---------------------------------------------------------------------------
# Allow variables

include "expr/varref.rnc"
primary |= varref